/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.verification.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.verification.JSON;

/**
 * It displays the details of the director of the company.
 */
@Schema(description = "It displays the details of the director of the company.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-20T10:11:49.428720Z[Etc/UTC]")
public class CinResponseSchemaDirectorDetailsInner {
  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private String dob;

  public static final String SERIALIZED_NAME_DESIGNATION = "designation";
  @SerializedName(SERIALIZED_NAME_DESIGNATION)
  private String designation;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_DIN = "din";
  @SerializedName(SERIALIZED_NAME_DIN)
  private String din;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public CinResponseSchemaDirectorDetailsInner() {
  }

  public CinResponseSchemaDirectorDetailsInner dob(String dob) {
    
    this.dob = dob;
    return this;
  }

   /**
   * It displays the date of birth of the director.
   * @return dob
  **/
  @javax.annotation.Nullable
  @Schema(example = "1997-07-26", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the date of birth of the director.")
  public String getDob() {
    return dob;
  }


  public void setDob(String dob) {
    this.dob = dob;
  }


  public CinResponseSchemaDirectorDetailsInner designation(String designation) {
    
    this.designation = designation;
    return this;
  }

   /**
   * It displays the designation of the director.
   * @return designation
  **/
  @javax.annotation.Nullable
  @Schema(example = "DIRECTOR", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the designation of the director.")
  public String getDesignation() {
    return designation;
  }


  public void setDesignation(String designation) {
    this.designation = designation;
  }


  public CinResponseSchemaDirectorDetailsInner address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * It displays the address information of the director.
   * @return address
  **/
  @javax.annotation.Nullable
  @Schema(example = "DIRECTOR", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the address information of the director.")
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public CinResponseSchemaDirectorDetailsInner din(String din) {
    
    this.din = din;
    return this;
  }

   /**
   * It displays the unique identification number assigned to individuals who are appointed as directors of companies in India.
   * @return din
  **/
  @javax.annotation.Nullable
  @Schema(example = "DIRECTOR", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the unique identification number assigned to individuals who are appointed as directors of companies in India.")
  public String getDin() {
    return din;
  }


  public void setDin(String din) {
    this.din = din;
  }


  public CinResponseSchemaDirectorDetailsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * It displays the name of the director.
   * @return name
  **/
  @javax.annotation.Nullable
  @Schema(example = "DIRECTOR", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name of the director.")
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CinResponseSchemaDirectorDetailsInner cinResponseSchemaDirectorDetailsInner = (CinResponseSchemaDirectorDetailsInner) o;
    return Objects.equals(this.dob, cinResponseSchemaDirectorDetailsInner.dob) &&
        Objects.equals(this.designation, cinResponseSchemaDirectorDetailsInner.designation) &&
        Objects.equals(this.address, cinResponseSchemaDirectorDetailsInner.address) &&
        Objects.equals(this.din, cinResponseSchemaDirectorDetailsInner.din) &&
        Objects.equals(this.name, cinResponseSchemaDirectorDetailsInner.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dob, designation, address, din, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CinResponseSchemaDirectorDetailsInner {\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    designation: ").append(toIndentedString(designation)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    din: ").append(toIndentedString(din)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dob");
    openapiFields.add("designation");
    openapiFields.add("address");
    openapiFields.add("din");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CinResponseSchemaDirectorDetailsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if ((jsonObj.get("designation") != null && !jsonObj.get("designation").isJsonNull()) && !jsonObj.get("designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("din") != null && !jsonObj.get("din").isJsonNull()) && !jsonObj.get("din").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `din` to be a primitive type in the JSON string but got `%s`", jsonObj.get("din").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CinResponseSchemaDirectorDetailsInner
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if ((jsonObj.get("designation") != null && !jsonObj.get("designation").isJsonNull()) && !jsonObj.get("designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("din") != null && !jsonObj.get("din").isJsonNull()) && !jsonObj.get("din").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `din` to be a primitive type in the JSON string but got `%s`", jsonObj.get("din").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CinResponseSchemaDirectorDetailsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CinResponseSchemaDirectorDetailsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CinResponseSchemaDirectorDetailsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CinResponseSchemaDirectorDetailsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CinResponseSchemaDirectorDetailsInner>() {
           @Override
           public void write(JsonWriter out, CinResponseSchemaDirectorDetailsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CinResponseSchemaDirectorDetailsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CinResponseSchemaDirectorDetailsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CinResponseSchemaDirectorDetailsInner
  * @throws IOException if the JSON string is invalid with respect to CinResponseSchemaDirectorDetailsInner
  */
  public static CinResponseSchemaDirectorDetailsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CinResponseSchemaDirectorDetailsInner.class);
  }

 /**
  * Convert an instance of CinResponseSchemaDirectorDetailsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

