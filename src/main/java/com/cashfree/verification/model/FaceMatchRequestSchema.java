/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.verification.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.verification.JSON;

/**
 * Find the request parameters to verify facial features in two images
 */
@Schema(description = "Find the request parameters to verify facial features in two images")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-20T10:11:49.428720Z[Etc/UTC]")
public class FaceMatchRequestSchema {
  public static final String SERIALIZED_NAME_VERIFICATION_ID = "verification_id";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ID)
  private String verificationId = "12345678";

  public static final String SERIALIZED_NAME_FIRST_IMAGE = "first_image";
  @SerializedName(SERIALIZED_NAME_FIRST_IMAGE)
  private File firstImage;

  public static final String SERIALIZED_NAME_SECOND_IMAGE = "second_image";
  @SerializedName(SERIALIZED_NAME_SECOND_IMAGE)
  private File secondImage;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private String threshold = "0.5";

  public static final String SERIALIZED_NAME_DETECT_MASK_FIRST_IMAGE = "detect_mask_first_image";
  @SerializedName(SERIALIZED_NAME_DETECT_MASK_FIRST_IMAGE)
  private Boolean detectMaskFirstImage;

  public static final String SERIALIZED_NAME_DETECT_MASK_SECOND_IMAGE = "detect_mask_second_image";
  @SerializedName(SERIALIZED_NAME_DETECT_MASK_SECOND_IMAGE)
  private Boolean detectMaskSecondImage;

  public static final String SERIALIZED_NAME_ALIGN_HORIZONTALLY = "align_horizontally";
  @SerializedName(SERIALIZED_NAME_ALIGN_HORIZONTALLY)
  private Boolean alignHorizontally;

  public FaceMatchRequestSchema() {
  }

  public FaceMatchRequestSchema verificationId(String verificationId) {
    
    this.verificationId = verificationId;
    return this;
  }

   /**
   * It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
   * @return verificationId
  **/
  @javax.annotation.Nonnull
  @Schema(example = "12345678", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.")
  public String getVerificationId() {
    return verificationId;
  }


  public void setVerificationId(String verificationId) {
    this.verificationId = verificationId;
  }


  public FaceMatchRequestSchema firstImage(File firstImage) {
    
    this.firstImage = firstImage;
    return this;
  }

   /**
   * It is the scanned copy of the image 1. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
   * @return firstImage
  **/
  @javax.annotation.Nonnull
  @Schema(example = "[B@1d1deb11", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the scanned copy of the image 1. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.")
  public File getFirstImage() {
    return firstImage;
  }


  public void setFirstImage(File firstImage) {
    this.firstImage = firstImage;
  }


  public FaceMatchRequestSchema secondImage(File secondImage) {
    
    this.secondImage = secondImage;
    return this;
  }

   /**
   * It is the scanned copy of the image 2. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
   * @return secondImage
  **/
  @javax.annotation.Nonnull
  @Schema(example = "[B@18d1d137", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the scanned copy of the image 2. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.")
  public File getSecondImage() {
    return secondImage;
  }


  public void setSecondImage(File secondImage) {
    this.secondImage = secondImage;
  }


  public FaceMatchRequestSchema threshold(String threshold) {
    
    this.threshold = threshold;
    return this;
  }

   /**
   * It is the value to distinguish and match the facial features of the two images. The range is between 0 and 1. The default value is set as 0.7. We conclude that the images match when the analysis is or greater than the value set for threshold.
   * @return threshold
  **/
  @javax.annotation.Nullable
  @Schema(example = "0.5", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It is the value to distinguish and match the facial features of the two images. The range is between 0 and 1. The default value is set as 0.7. We conclude that the images match when the analysis is or greater than the value set for threshold.")
  public String getThreshold() {
    return threshold;
  }


  public void setThreshold(String threshold) {
    this.threshold = threshold;
  }


  public FaceMatchRequestSchema detectMaskFirstImage(Boolean detectMaskFirstImage) {
    
    this.detectMaskFirstImage = detectMaskFirstImage;
    return this;
  }

   /**
   * It is a boolean value to identify whether the person in the first image is wearing a mask.
   * @return detectMaskFirstImage
  **/
  @javax.annotation.Nullable
  @Schema(example = "true", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It is a boolean value to identify whether the person in the first image is wearing a mask.")
  public Boolean getDetectMaskFirstImage() {
    return detectMaskFirstImage;
  }


  public void setDetectMaskFirstImage(Boolean detectMaskFirstImage) {
    this.detectMaskFirstImage = detectMaskFirstImage;
  }


  public FaceMatchRequestSchema detectMaskSecondImage(Boolean detectMaskSecondImage) {
    
    this.detectMaskSecondImage = detectMaskSecondImage;
    return this;
  }

   /**
   * It is a boolean value to identify whether the person in the first image is wearing a mask.
   * @return detectMaskSecondImage
  **/
  @javax.annotation.Nullable
  @Schema(example = "true", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It is a boolean value to identify whether the person in the first image is wearing a mask.")
  public Boolean getDetectMaskSecondImage() {
    return detectMaskSecondImage;
  }


  public void setDetectMaskSecondImage(Boolean detectMaskSecondImage) {
    this.detectMaskSecondImage = detectMaskSecondImage;
  }


  public FaceMatchRequestSchema alignHorizontally(Boolean alignHorizontally) {
    
    this.alignHorizontally = alignHorizontally;
    return this;
  }

   /**
   * It is a boolean value to align the images horizontally before analysing the facial features.
   * @return alignHorizontally
  **/
  @javax.annotation.Nullable
  @Schema(example = "true", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It is a boolean value to align the images horizontally before analysing the facial features.")
  public Boolean getAlignHorizontally() {
    return alignHorizontally;
  }


  public void setAlignHorizontally(Boolean alignHorizontally) {
    this.alignHorizontally = alignHorizontally;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaceMatchRequestSchema faceMatchRequestSchema = (FaceMatchRequestSchema) o;
    return Objects.equals(this.verificationId, faceMatchRequestSchema.verificationId) &&
        Objects.equals(this.firstImage, faceMatchRequestSchema.firstImage) &&
        Objects.equals(this.secondImage, faceMatchRequestSchema.secondImage) &&
        Objects.equals(this.threshold, faceMatchRequestSchema.threshold) &&
        Objects.equals(this.detectMaskFirstImage, faceMatchRequestSchema.detectMaskFirstImage) &&
        Objects.equals(this.detectMaskSecondImage, faceMatchRequestSchema.detectMaskSecondImage) &&
        Objects.equals(this.alignHorizontally, faceMatchRequestSchema.alignHorizontally);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verificationId, firstImage, secondImage, threshold, detectMaskFirstImage, detectMaskSecondImage, alignHorizontally);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaceMatchRequestSchema {\n");
    sb.append("    verificationId: ").append(toIndentedString(verificationId)).append("\n");
    sb.append("    firstImage: ").append(toIndentedString(firstImage)).append("\n");
    sb.append("    secondImage: ").append(toIndentedString(secondImage)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    detectMaskFirstImage: ").append(toIndentedString(detectMaskFirstImage)).append("\n");
    sb.append("    detectMaskSecondImage: ").append(toIndentedString(detectMaskSecondImage)).append("\n");
    sb.append("    alignHorizontally: ").append(toIndentedString(alignHorizontally)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("verification_id");
    openapiFields.add("first_image");
    openapiFields.add("second_image");
    openapiFields.add("threshold");
    openapiFields.add("detect_mask_first_image");
    openapiFields.add("detect_mask_second_image");
    openapiFields.add("align_horizontally");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("verification_id");
    openapiRequiredFields.add("first_image");
    openapiRequiredFields.add("second_image");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FaceMatchRequestSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FaceMatchRequestSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      if ((jsonObj.get("threshold") != null && !jsonObj.get("threshold").isJsonNull()) && !jsonObj.get("threshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threshold").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FaceMatchRequestSchema
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FaceMatchRequestSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      if ((jsonObj.get("threshold") != null && !jsonObj.get("threshold").isJsonNull()) && !jsonObj.get("threshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threshold").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FaceMatchRequestSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FaceMatchRequestSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FaceMatchRequestSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FaceMatchRequestSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<FaceMatchRequestSchema>() {
           @Override
           public void write(JsonWriter out, FaceMatchRequestSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FaceMatchRequestSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FaceMatchRequestSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FaceMatchRequestSchema
  * @throws IOException if the JSON string is invalid with respect to FaceMatchRequestSchema
  */
  public static FaceMatchRequestSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaceMatchRequestSchema.class);
  }

 /**
  * Convert an instance of FaceMatchRequestSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

