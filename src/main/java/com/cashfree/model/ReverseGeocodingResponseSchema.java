/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * Reverse Geocoding success response
 */
@Schema(description = "Reverse Geocoding success response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-18T11:12:20.695812Z[Etc/UTC]")
public class ReverseGeocodingResponseSchema {
  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private Integer referenceId;

  public static final String SERIALIZED_NAME_VERIFICATION_ID = "verification_id";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ID)
  private String verificationId;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private String longitude;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATECODE = "statecode";
  @SerializedName(SERIALIZED_NAME_STATECODE)
  private String statecode;

  public static final String SERIALIZED_NAME_COUNTRYCODE = "countrycode";
  @SerializedName(SERIALIZED_NAME_COUNTRYCODE)
  private String countrycode;

  public static final String SERIALIZED_NAME_PINCODE = "pincode";
  @SerializedName(SERIALIZED_NAME_PINCODE)
  private String pincode;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public ReverseGeocodingResponseSchema() {
  }

  public ReverseGeocodingResponseSchema referenceId(Integer referenceId) {
    
    this.referenceId = referenceId;
    return this;
  }

   /**
   * It displays the unique ID created by Cashfree Payments for reference purposes.
   * @return referenceId
  **/
  @javax.annotation.Nullable
  @Schema(example = "21637861", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the unique ID created by Cashfree Payments for reference purposes.")
  public Integer getReferenceId() {
    return referenceId;
  }


  public void setReferenceId(Integer referenceId) {
    this.referenceId = referenceId;
  }


  public ReverseGeocodingResponseSchema verificationId(String verificationId) {
    
    this.verificationId = verificationId;
    return this;
  }

   /**
   * It displays the unique ID you created to identify the verification request.
   * @return verificationId
  **/
  @javax.annotation.Nullable
  @Schema(example = "test001", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the unique ID you created to identify the verification request.")
  public String getVerificationId() {
    return verificationId;
  }


  public void setVerificationId(String verificationId) {
    this.verificationId = verificationId;
  }


  public ReverseGeocodingResponseSchema latitude(String latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * It displays the entered angular distance expressed in degrees of arc north or south of the equator to specify the location.
   * @return latitude
  **/
  @javax.annotation.Nullable
  @Schema(example = "12.9274477", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the entered angular distance expressed in degrees of arc north or south of the equator to specify the location.")
  public String getLatitude() {
    return latitude;
  }


  public void setLatitude(String latitude) {
    this.latitude = latitude;
  }


  public ReverseGeocodingResponseSchema longitude(String longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * It displays the entered angular distance expressed in degrees of arc east or west of the equator to specify the location.
   * @return longitude
  **/
  @javax.annotation.Nullable
  @Schema(example = "77.6326542", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the entered angular distance expressed in degrees of arc east or west of the equator to specify the location.")
  public String getLongitude() {
    return longitude;
  }


  public void setLongitude(String longitude) {
    this.longitude = longitude;
  }


  public ReverseGeocodingResponseSchema address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * It displays the physical address of the entered coordinates.
   * @return address
  **/
  @javax.annotation.Nullable
  @Schema(example = "JSS Institutions Campus, First Floor, CA Site No.1, HAL 3rd Stage, HAL 3rd Stage, KodihalliBehind Hotel Leela Palace, HAL 2nd Stage, Kodihalli, Bengaluru, Karnataka 560008, India", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the physical address of the entered coordinates.")
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public ReverseGeocodingResponseSchema city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * It displays the name of the city of the entered coordinates.
   * @return city
  **/
  @javax.annotation.Nullable
  @Schema(example = "bangalore", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name of the city of the entered coordinates.")
  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public ReverseGeocodingResponseSchema state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * It displays the name of the state of the entered coordinates.
   * @return state
  **/
  @javax.annotation.Nullable
  @Schema(example = "Karnataka", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name of the state of the entered coordinates.")
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public ReverseGeocodingResponseSchema statecode(String statecode) {
    
    this.statecode = statecode;
    return this;
  }

   /**
   * It displays the state&#39;s code of the entered coordinates.
   * @return statecode
  **/
  @javax.annotation.Nullable
  @Schema(example = "KA", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the state's code of the entered coordinates.")
  public String getStatecode() {
    return statecode;
  }


  public void setStatecode(String statecode) {
    this.statecode = statecode;
  }


  public ReverseGeocodingResponseSchema countrycode(String countrycode) {
    
    this.countrycode = countrycode;
    return this;
  }

   /**
   * It displays the country&#39;s code of the entered coordinates.
   * @return countrycode
  **/
  @javax.annotation.Nullable
  @Schema(example = "In", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the country's code of the entered coordinates.")
  public String getCountrycode() {
    return countrycode;
  }


  public void setCountrycode(String countrycode) {
    this.countrycode = countrycode;
  }


  public ReverseGeocodingResponseSchema pincode(String pincode) {
    
    this.pincode = pincode;
    return this;
  }

   /**
   * It displays the PIN code information of the entered coordinates.
   * @return pincode
  **/
  @javax.annotation.Nullable
  @Schema(example = "560008", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the PIN code information of the entered coordinates.")
  public String getPincode() {
    return pincode;
  }


  public void setPincode(String pincode) {
    this.pincode = pincode;
  }


  public ReverseGeocodingResponseSchema score(BigDecimal score) {
    
    this.score = score;
    return this;
  }

   /**
   * 
   * @return score
  **/
  @javax.annotation.Nullable
  @Schema(example = "1", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public BigDecimal getScore() {
    return score;
  }


  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public ReverseGeocodingResponseSchema status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * It displays the status of the entered coordinates.
   * @return status
  **/
  @javax.annotation.Nullable
  @Schema(example = "VALID", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the status of the entered coordinates.")
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReverseGeocodingResponseSchema reverseGeocodingResponseSchema = (ReverseGeocodingResponseSchema) o;
    return Objects.equals(this.referenceId, reverseGeocodingResponseSchema.referenceId) &&
        Objects.equals(this.verificationId, reverseGeocodingResponseSchema.verificationId) &&
        Objects.equals(this.latitude, reverseGeocodingResponseSchema.latitude) &&
        Objects.equals(this.longitude, reverseGeocodingResponseSchema.longitude) &&
        Objects.equals(this.address, reverseGeocodingResponseSchema.address) &&
        Objects.equals(this.city, reverseGeocodingResponseSchema.city) &&
        Objects.equals(this.state, reverseGeocodingResponseSchema.state) &&
        Objects.equals(this.statecode, reverseGeocodingResponseSchema.statecode) &&
        Objects.equals(this.countrycode, reverseGeocodingResponseSchema.countrycode) &&
        Objects.equals(this.pincode, reverseGeocodingResponseSchema.pincode) &&
        Objects.equals(this.score, reverseGeocodingResponseSchema.score) &&
        Objects.equals(this.status, reverseGeocodingResponseSchema.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceId, verificationId, latitude, longitude, address, city, state, statecode, countrycode, pincode, score, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReverseGeocodingResponseSchema {\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    verificationId: ").append(toIndentedString(verificationId)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statecode: ").append(toIndentedString(statecode)).append("\n");
    sb.append("    countrycode: ").append(toIndentedString(countrycode)).append("\n");
    sb.append("    pincode: ").append(toIndentedString(pincode)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reference_id");
    openapiFields.add("verification_id");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("address");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("statecode");
    openapiFields.add("countrycode");
    openapiFields.add("pincode");
    openapiFields.add("score");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReverseGeocodingResponseSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("verification_id") != null && !jsonObj.get("verification_id").isJsonNull()) && !jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("statecode") != null && !jsonObj.get("statecode").isJsonNull()) && !jsonObj.get("statecode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statecode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statecode").toString()));
      }
      if ((jsonObj.get("countrycode") != null && !jsonObj.get("countrycode").isJsonNull()) && !jsonObj.get("countrycode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countrycode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countrycode").toString()));
      }
      if ((jsonObj.get("pincode") != null && !jsonObj.get("pincode").isJsonNull()) && !jsonObj.get("pincode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pincode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pincode").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReverseGeocodingResponseSchema
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("verification_id") != null && !jsonObj.get("verification_id").isJsonNull()) && !jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("statecode") != null && !jsonObj.get("statecode").isJsonNull()) && !jsonObj.get("statecode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statecode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statecode").toString()));
      }
      if ((jsonObj.get("countrycode") != null && !jsonObj.get("countrycode").isJsonNull()) && !jsonObj.get("countrycode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countrycode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countrycode").toString()));
      }
      if ((jsonObj.get("pincode") != null && !jsonObj.get("pincode").isJsonNull()) && !jsonObj.get("pincode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pincode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pincode").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReverseGeocodingResponseSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReverseGeocodingResponseSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReverseGeocodingResponseSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReverseGeocodingResponseSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ReverseGeocodingResponseSchema>() {
           @Override
           public void write(JsonWriter out, ReverseGeocodingResponseSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReverseGeocodingResponseSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReverseGeocodingResponseSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReverseGeocodingResponseSchema
  * @throws IOException if the JSON string is invalid with respect to ReverseGeocodingResponseSchema
  */
  public static ReverseGeocodingResponseSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReverseGeocodingResponseSchema.class);
  }

 /**
  * Convert an instance of ReverseGeocodingResponseSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

