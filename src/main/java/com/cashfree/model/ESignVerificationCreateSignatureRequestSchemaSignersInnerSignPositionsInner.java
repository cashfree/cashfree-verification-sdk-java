/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-08T05:03:36.102379Z[Etc/UTC]")
public class ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page = 1;

  public static final String SERIALIZED_NAME_TOP_LEFT_X_COORDINATE = "top_left_x_coordinate";
  @SerializedName(SERIALIZED_NAME_TOP_LEFT_X_COORDINATE)
  private Integer topLeftXCoordinate = 100;

  public static final String SERIALIZED_NAME_BOTTOM_RIGHT_X_COORDINATE = "bottom_right_x_coordinate";
  @SerializedName(SERIALIZED_NAME_BOTTOM_RIGHT_X_COORDINATE)
  private Integer bottomRightXCoordinate = 200;

  public static final String SERIALIZED_NAME_TOP_LEFT_Y_COORDINATE = "top_left_y_coordinate";
  @SerializedName(SERIALIZED_NAME_TOP_LEFT_Y_COORDINATE)
  private Integer topLeftYCoordinate = 180;

  public static final String SERIALIZED_NAME_BOTTOM_RIGHT_Y_COORDINATE = "bottom_right_y_coordinate";
  @SerializedName(SERIALIZED_NAME_BOTTOM_RIGHT_Y_COORDINATE)
  private Integer bottomRightYCoordinate = 120;

  public ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner() {
  }

  public ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner page(Integer page) {
    
    this.page = page;
    return this;
  }

   /**
   * It is the page number where the signer places the signature.
   * @return page
  **/
  @javax.annotation.Nonnull
  @Schema(example = "1", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the page number where the signer places the signature.")
  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    this.page = page;
  }


  public ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner topLeftXCoordinate(Integer topLeftXCoordinate) {
    
    this.topLeftXCoordinate = topLeftXCoordinate;
    return this;
  }

   /**
   * It is the top left X coordinate of the signature area (rectangular).
   * @return topLeftXCoordinate
  **/
  @javax.annotation.Nonnull
  @Schema(example = "100", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the top left X coordinate of the signature area (rectangular).")
  public Integer getTopLeftXCoordinate() {
    return topLeftXCoordinate;
  }


  public void setTopLeftXCoordinate(Integer topLeftXCoordinate) {
    this.topLeftXCoordinate = topLeftXCoordinate;
  }


  public ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner bottomRightXCoordinate(Integer bottomRightXCoordinate) {
    
    this.bottomRightXCoordinate = bottomRightXCoordinate;
    return this;
  }

   /**
   * It is the bottom right X coordinate of the signature area (rectangular).
   * @return bottomRightXCoordinate
  **/
  @javax.annotation.Nonnull
  @Schema(example = "200", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the bottom right X coordinate of the signature area (rectangular).")
  public Integer getBottomRightXCoordinate() {
    return bottomRightXCoordinate;
  }


  public void setBottomRightXCoordinate(Integer bottomRightXCoordinate) {
    this.bottomRightXCoordinate = bottomRightXCoordinate;
  }


  public ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner topLeftYCoordinate(Integer topLeftYCoordinate) {
    
    this.topLeftYCoordinate = topLeftYCoordinate;
    return this;
  }

   /**
   * It is the top left Y coordinate of the signature area (rectangular).
   * @return topLeftYCoordinate
  **/
  @javax.annotation.Nonnull
  @Schema(example = "180", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the top left Y coordinate of the signature area (rectangular).")
  public Integer getTopLeftYCoordinate() {
    return topLeftYCoordinate;
  }


  public void setTopLeftYCoordinate(Integer topLeftYCoordinate) {
    this.topLeftYCoordinate = topLeftYCoordinate;
  }


  public ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner bottomRightYCoordinate(Integer bottomRightYCoordinate) {
    
    this.bottomRightYCoordinate = bottomRightYCoordinate;
    return this;
  }

   /**
   * It is the bottom right Y coordinate of the signature area (rectangular).
   * @return bottomRightYCoordinate
  **/
  @javax.annotation.Nonnull
  @Schema(example = "120", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the bottom right Y coordinate of the signature area (rectangular).")
  public Integer getBottomRightYCoordinate() {
    return bottomRightYCoordinate;
  }


  public void setBottomRightYCoordinate(Integer bottomRightYCoordinate) {
    this.bottomRightYCoordinate = bottomRightYCoordinate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner esignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner = (ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner) o;
    return Objects.equals(this.page, esignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.page) &&
        Objects.equals(this.topLeftXCoordinate, esignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.topLeftXCoordinate) &&
        Objects.equals(this.bottomRightXCoordinate, esignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.bottomRightXCoordinate) &&
        Objects.equals(this.topLeftYCoordinate, esignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.topLeftYCoordinate) &&
        Objects.equals(this.bottomRightYCoordinate, esignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.bottomRightYCoordinate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, topLeftXCoordinate, bottomRightXCoordinate, topLeftYCoordinate, bottomRightYCoordinate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    topLeftXCoordinate: ").append(toIndentedString(topLeftXCoordinate)).append("\n");
    sb.append("    bottomRightXCoordinate: ").append(toIndentedString(bottomRightXCoordinate)).append("\n");
    sb.append("    topLeftYCoordinate: ").append(toIndentedString(topLeftYCoordinate)).append("\n");
    sb.append("    bottomRightYCoordinate: ").append(toIndentedString(bottomRightYCoordinate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("page");
    openapiFields.add("top_left_x_coordinate");
    openapiFields.add("bottom_right_x_coordinate");
    openapiFields.add("top_left_y_coordinate");
    openapiFields.add("bottom_right_y_coordinate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("page");
    openapiRequiredFields.add("top_left_x_coordinate");
    openapiRequiredFields.add("bottom_right_x_coordinate");
    openapiRequiredFields.add("top_left_y_coordinate");
    openapiRequiredFields.add("bottom_right_y_coordinate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner>() {
           @Override
           public void write(JsonWriter out, ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
  * @throws IOException if the JSON string is invalid with respect to ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
  */
  public static ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.class);
  }

 /**
  * Convert an instance of ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

