/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.cashfree.model.ESignVerificationCreateSignatureRequestSchemaSignersInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * Find the request parameters to add the details of the document and signer(s)
 */
@Schema(description = "Find the request parameters to add the details of the document and signer(s)")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-21T07:15:37.235803Z[Etc/UTC]")
public class ESignVerificationCreateSignatureRequestSchema {
  public static final String SERIALIZED_NAME_VERIFICATION_ID = "verification_id";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ID)
  private String verificationId = "ABC00123";

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "document_id";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private Integer documentId = 36;

  /**
   * Gets or Sets notificationModes
   */
  @JsonAdapter(NotificationModesEnum.Adapter.class)
  public enum NotificationModesEnum {
    EMAIL("email"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    NotificationModesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotificationModesEnum fromValue(String value) {
      for (NotificationModesEnum b : NotificationModesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<NotificationModesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotificationModesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotificationModesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotificationModesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NOTIFICATION_MODES = "notification_modes";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_MODES)
  private List<NotificationModesEnum> notificationModes = new ArrayList<>();

  /**
   * It is the type of authentication to be used for signature.
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    AADHAAR("AADHAAR"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_EXPIRY_IN_DAYS = "expiry_in_days";
  @SerializedName(SERIALIZED_NAME_EXPIRY_IN_DAYS)
  private String expiryInDays = "2";

  public static final String SERIALIZED_NAME_SIGNERS = "signers";
  @SerializedName(SERIALIZED_NAME_SIGNERS)
  private List<ESignVerificationCreateSignatureRequestSchemaSignersInner> signers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl = "REDIRECT_PAGE_URL";

  public ESignVerificationCreateSignatureRequestSchema() {
  }

  public ESignVerificationCreateSignatureRequestSchema verificationId(String verificationId) {
    
    this.verificationId = verificationId;
    return this;
  }

   /**
   * It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.
   * @return verificationId
  **/
  @javax.annotation.Nonnull
  @Schema(example = "ABC00123", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.")
  public String getVerificationId() {
    return verificationId;
  }


  public void setVerificationId(String verificationId) {
    this.verificationId = verificationId;
  }


  public ESignVerificationCreateSignatureRequestSchema documentId(Integer documentId) {
    
    this.documentId = documentId;
    return this;
  }

   /**
   * It is the unique ID received in the Upload Document for E-Sign API response.
   * @return documentId
  **/
  @javax.annotation.Nonnull
  @Schema(example = "36", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the unique ID received in the Upload Document for E-Sign API response.")
  public Integer getDocumentId() {
    return documentId;
  }


  public void setDocumentId(Integer documentId) {
    this.documentId = documentId;
  }


  public ESignVerificationCreateSignatureRequestSchema notificationModes(List<NotificationModesEnum> notificationModes) {
    
    this.notificationModes = notificationModes;
    return this;
  }

  public ESignVerificationCreateSignatureRequestSchema addNotificationModesItem(NotificationModesEnum notificationModesItem) {
    if (this.notificationModes == null) {
      this.notificationModes = new ArrayList<>();
    }
    this.notificationModes.add(notificationModesItem);
    return this;
  }

   /**
   * It is how you want to notify the signee about the e-sign details.
   * @return notificationModes
  **/
  @javax.annotation.Nonnull
  @Schema(example = "[\"email\"]", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is how you want to notify the signee about the e-sign details.")
  public List<NotificationModesEnum> getNotificationModes() {
    return notificationModes;
  }


  public void setNotificationModes(List<NotificationModesEnum> notificationModes) {
    this.notificationModes = notificationModes;
  }


  public ESignVerificationCreateSignatureRequestSchema authType(AuthTypeEnum authType) {
    
    this.authType = authType;
    return this;
  }

   /**
   * It is the type of authentication to be used for signature.
   * @return authType
  **/
  @javax.annotation.Nonnull
  @Schema(example = "AADHAAR", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the type of authentication to be used for signature.")
  public AuthTypeEnum getAuthType() {
    return authType;
  }


  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }


  public ESignVerificationCreateSignatureRequestSchema expiryInDays(String expiryInDays) {
    
    this.expiryInDays = expiryInDays;
    return this;
  }

   /**
   * It is the expiry of the signing link for each signer in days. The maximum allowed time is 15 days.
   * @return expiryInDays
  **/
  @javax.annotation.Nonnull
  @Schema(example = "2", requiredMode = Schema.RequiredMode.REQUIRED, description = "It is the expiry of the signing link for each signer in days. The maximum allowed time is 15 days.")
  public String getExpiryInDays() {
    return expiryInDays;
  }


  public void setExpiryInDays(String expiryInDays) {
    this.expiryInDays = expiryInDays;
  }


  public ESignVerificationCreateSignatureRequestSchema signers(List<ESignVerificationCreateSignatureRequestSchemaSignersInner> signers) {
    
    this.signers = signers;
    return this;
  }

  public ESignVerificationCreateSignatureRequestSchema addSignersItem(ESignVerificationCreateSignatureRequestSchemaSignersInner signersItem) {
    if (this.signers == null) {
      this.signers = new ArrayList<>();
    }
    this.signers.add(signersItem);
    return this;
  }

   /**
   * It should contain the details of the signer(s).
   * @return signers
  **/
  @javax.annotation.Nonnull
  @Schema(example = "[{\"name\":\"John Doe\",\"email\":\"John.Doe@email.com\",\"phone\":\"9999999999\",\"sequence\":1,\"sign_positions\":[{\"page\":1,\"top_left_x_coordinate\":100,\"bottom_right_x_coordinate\":200,\"top_left_y_coordinate\":180,\"bottom_right_y_coordinate\":120},{\"page\":2,\"top_left_x_coordinate\":100,\"bottom_right_x_coordinate\":200,\"top_left_y_coordinate\":180,\"bottom_right_y_coordinate\":120}]}]", requiredMode = Schema.RequiredMode.REQUIRED, description = "It should contain the details of the signer(s).")
  public List<ESignVerificationCreateSignatureRequestSchemaSignersInner> getSigners() {
    return signers;
  }


  public void setSigners(List<ESignVerificationCreateSignatureRequestSchemaSignersInner> signers) {
    this.signers = signers;
  }


  public ESignVerificationCreateSignatureRequestSchema redirectUrl(String redirectUrl) {
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * It is the URL that you need to provide that takes the user to after completing the e-sign journey. It will contain the verification_id that can be used to get the status of the verification.
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @Schema(example = "REDIRECT_PAGE_URL", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It is the URL that you need to provide that takes the user to after completing the e-sign journey. It will contain the verification_id that can be used to get the status of the verification.")
  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ESignVerificationCreateSignatureRequestSchema esignVerificationCreateSignatureRequestSchema = (ESignVerificationCreateSignatureRequestSchema) o;
    return Objects.equals(this.verificationId, esignVerificationCreateSignatureRequestSchema.verificationId) &&
        Objects.equals(this.documentId, esignVerificationCreateSignatureRequestSchema.documentId) &&
        Objects.equals(this.notificationModes, esignVerificationCreateSignatureRequestSchema.notificationModes) &&
        Objects.equals(this.authType, esignVerificationCreateSignatureRequestSchema.authType) &&
        Objects.equals(this.expiryInDays, esignVerificationCreateSignatureRequestSchema.expiryInDays) &&
        Objects.equals(this.signers, esignVerificationCreateSignatureRequestSchema.signers) &&
        Objects.equals(this.redirectUrl, esignVerificationCreateSignatureRequestSchema.redirectUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verificationId, documentId, notificationModes, authType, expiryInDays, signers, redirectUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ESignVerificationCreateSignatureRequestSchema {\n");
    sb.append("    verificationId: ").append(toIndentedString(verificationId)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    notificationModes: ").append(toIndentedString(notificationModes)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    expiryInDays: ").append(toIndentedString(expiryInDays)).append("\n");
    sb.append("    signers: ").append(toIndentedString(signers)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("verification_id");
    openapiFields.add("document_id");
    openapiFields.add("notification_modes");
    openapiFields.add("auth_type");
    openapiFields.add("expiry_in_days");
    openapiFields.add("signers");
    openapiFields.add("redirect_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("verification_id");
    openapiRequiredFields.add("document_id");
    openapiRequiredFields.add("notification_modes");
    openapiRequiredFields.add("auth_type");
    openapiRequiredFields.add("expiry_in_days");
    openapiRequiredFields.add("signers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ESignVerificationCreateSignatureRequestSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ESignVerificationCreateSignatureRequestSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("notification_modes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("notification_modes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_modes` to be an array in the JSON string but got `%s`", jsonObj.get("notification_modes").toString()));
      }
      if (!jsonObj.get("auth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type").toString()));
      }
      if (!jsonObj.get("expiry_in_days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiry_in_days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiry_in_days").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("signers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signers` to be an array in the JSON string but got `%s`", jsonObj.get("signers").toString()));
      }

      JsonArray jsonArraysigners = jsonObj.getAsJsonArray("signers");
      // validate the required field `signers` (array)
      for (int i = 0; i < jsonArraysigners.size(); i++) {
        ESignVerificationCreateSignatureRequestSchemaSignersInner.validateJsonElement(jsonArraysigners.get(i));
      };
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ESignVerificationCreateSignatureRequestSchema
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {


      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ESignVerificationCreateSignatureRequestSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("notification_modes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("notification_modes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_modes` to be an array in the JSON string but got `%s`", jsonObj.get("notification_modes").toString()));
      }
      if (!jsonObj.get("auth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type").toString()));
      }
      if (!jsonObj.get("expiry_in_days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiry_in_days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiry_in_days").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("signers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signers` to be an array in the JSON string but got `%s`", jsonObj.get("signers").toString()));
      }

      JsonArray jsonArraysigners = jsonObj.getAsJsonArray("signers");
      // validate the required field `signers` (array)
      for (int i = 0; i < jsonArraysigners.size(); i++) {
        ESignVerificationCreateSignatureRequestSchemaSignersInner.validateJsonElement(jsonArraysigners.get(i));
      };
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ESignVerificationCreateSignatureRequestSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ESignVerificationCreateSignatureRequestSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ESignVerificationCreateSignatureRequestSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ESignVerificationCreateSignatureRequestSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ESignVerificationCreateSignatureRequestSchema>() {
           @Override
           public void write(JsonWriter out, ESignVerificationCreateSignatureRequestSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ESignVerificationCreateSignatureRequestSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ESignVerificationCreateSignatureRequestSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ESignVerificationCreateSignatureRequestSchema
  * @throws IOException if the JSON string is invalid with respect to ESignVerificationCreateSignatureRequestSchema
  */
  public static ESignVerificationCreateSignatureRequestSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ESignVerificationCreateSignatureRequestSchema.class);
  }

 /**
  * Convert an instance of ESignVerificationCreateSignatureRequestSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

