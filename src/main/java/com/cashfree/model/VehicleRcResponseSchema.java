/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.cashfree.model.SplitAddress;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * Verify Vehicle RC success response
 */
@Schema(description = "Verify Vehicle RC success response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-08T05:03:36.102379Z[Etc/UTC]")
public class VehicleRcResponseSchema {
  public static final String SERIALIZED_NAME_VERIFICATION_ID = "verification_id";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ID)
  private String verificationId;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private Integer referenceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_REG_NO = "reg_no";
  @SerializedName(SERIALIZED_NAME_REG_NO)
  private String regNo;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass;

  public static final String SERIALIZED_NAME_CHASSIS = "chassis";
  @SerializedName(SERIALIZED_NAME_CHASSIS)
  private String chassis;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_VEHICLE_MANUFACTURER_NAME = "vehicle_manufacturer_name";
  @SerializedName(SERIALIZED_NAME_VEHICLE_MANUFACTURER_NAME)
  private String vehicleManufacturerName;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_VEHICLE_COLOR = "vehicle_color";
  @SerializedName(SERIALIZED_NAME_VEHICLE_COLOR)
  private String vehicleColor;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_NORMS_TYPE = "norms_type";
  @SerializedName(SERIALIZED_NAME_NORMS_TYPE)
  private String normsType;

  public static final String SERIALIZED_NAME_BODY_TYPE = "body_type";
  @SerializedName(SERIALIZED_NAME_BODY_TYPE)
  private String bodyType;

  public static final String SERIALIZED_NAME_OWNER_COUNT = "owner_count";
  @SerializedName(SERIALIZED_NAME_OWNER_COUNT)
  private String ownerCount;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_OWNER_FATHER_NAME = "owner_father_name";
  @SerializedName(SERIALIZED_NAME_OWNER_FATHER_NAME)
  private String ownerFatherName;

  public static final String SERIALIZED_NAME_MOBILE_NUMBER = "mobile_number";
  @SerializedName(SERIALIZED_NAME_MOBILE_NUMBER)
  private String mobileNumber;

  public static final String SERIALIZED_NAME_RC_STATUS = "rc_status";
  @SerializedName(SERIALIZED_NAME_RC_STATUS)
  private String rcStatus;

  public static final String SERIALIZED_NAME_STATUS_AS_ON = "status_as_on";
  @SerializedName(SERIALIZED_NAME_STATUS_AS_ON)
  private String statusAsOn;

  public static final String SERIALIZED_NAME_REG_AUTHORITY = "reg_authority";
  @SerializedName(SERIALIZED_NAME_REG_AUTHORITY)
  private String regAuthority;

  public static final String SERIALIZED_NAME_REG_DATE = "reg_date";
  @SerializedName(SERIALIZED_NAME_REG_DATE)
  private String regDate;

  public static final String SERIALIZED_NAME_VEHICLE_MANUFACTURING_MONTH_YEAR = "vehicle_manufacturing_month_year";
  @SerializedName(SERIALIZED_NAME_VEHICLE_MANUFACTURING_MONTH_YEAR)
  private String vehicleManufacturingMonthYear;

  public static final String SERIALIZED_NAME_RC_EXPIRY_DATE = "rc_expiry_date";
  @SerializedName(SERIALIZED_NAME_RC_EXPIRY_DATE)
  private String rcExpiryDate;

  public static final String SERIALIZED_NAME_VEHICLE_TAX_UPTO = "vehicle_tax_upto";
  @SerializedName(SERIALIZED_NAME_VEHICLE_TAX_UPTO)
  private String vehicleTaxUpto;

  public static final String SERIALIZED_NAME_VEHICLE_INSURANCE_COMPANY_NAME = "vehicle_insurance_company_name";
  @SerializedName(SERIALIZED_NAME_VEHICLE_INSURANCE_COMPANY_NAME)
  private String vehicleInsuranceCompanyName;

  public static final String SERIALIZED_NAME_VEHICLE_INSURANCE_UPTO = "vehicle_insurance_upto";
  @SerializedName(SERIALIZED_NAME_VEHICLE_INSURANCE_UPTO)
  private String vehicleInsuranceUpto;

  public static final String SERIALIZED_NAME_VEHICLE_INSURANCE_POLICY_NUMBER = "vehicle_insurance_policy_number";
  @SerializedName(SERIALIZED_NAME_VEHICLE_INSURANCE_POLICY_NUMBER)
  private String vehicleInsurancePolicyNumber;

  public static final String SERIALIZED_NAME_RC_FINANCER = "rc_financer";
  @SerializedName(SERIALIZED_NAME_RC_FINANCER)
  private String rcFinancer;

  public static final String SERIALIZED_NAME_PRESENT_ADDRESS = "present_address";
  @SerializedName(SERIALIZED_NAME_PRESENT_ADDRESS)
  private String presentAddress;

  public static final String SERIALIZED_NAME_SPLIT_PRESENT_ADDRESS = "split_present_address";
  @SerializedName(SERIALIZED_NAME_SPLIT_PRESENT_ADDRESS)
  private SplitAddress splitPresentAddress;

  public static final String SERIALIZED_NAME_PERMANENT_ADDRESS = "permanent_address";
  @SerializedName(SERIALIZED_NAME_PERMANENT_ADDRESS)
  private String permanentAddress;

  public static final String SERIALIZED_NAME_SPLIT_PERMANENT_ADDRESS = "split_permanent_address";
  @SerializedName(SERIALIZED_NAME_SPLIT_PERMANENT_ADDRESS)
  private SplitAddress splitPermanentAddress;

  public static final String SERIALIZED_NAME_VEHICLE_CUBIC_CAPACITY = "vehicle_cubic_capacity";
  @SerializedName(SERIALIZED_NAME_VEHICLE_CUBIC_CAPACITY)
  private String vehicleCubicCapacity;

  public static final String SERIALIZED_NAME_GROSS_VEHICLE_WEIGHT = "gross_vehicle_weight";
  @SerializedName(SERIALIZED_NAME_GROSS_VEHICLE_WEIGHT)
  private String grossVehicleWeight;

  public static final String SERIALIZED_NAME_UNLADEN_WEIGHT = "unladen_weight";
  @SerializedName(SERIALIZED_NAME_UNLADEN_WEIGHT)
  private String unladenWeight;

  public static final String SERIALIZED_NAME_VEHICLE_CATEGORY = "vehicle_category";
  @SerializedName(SERIALIZED_NAME_VEHICLE_CATEGORY)
  private String vehicleCategory;

  public static final String SERIALIZED_NAME_RC_STANDARD_CAP = "rc_standard_cap";
  @SerializedName(SERIALIZED_NAME_RC_STANDARD_CAP)
  private String rcStandardCap;

  public static final String SERIALIZED_NAME_VEHICLE_CYLINDERS_NO = "vehicle_cylinders_no";
  @SerializedName(SERIALIZED_NAME_VEHICLE_CYLINDERS_NO)
  private String vehicleCylindersNo;

  public static final String SERIALIZED_NAME_VEHICLE_SEAT_CAPACITY = "vehicle_seat_capacity";
  @SerializedName(SERIALIZED_NAME_VEHICLE_SEAT_CAPACITY)
  private String vehicleSeatCapacity;

  public static final String SERIALIZED_NAME_VEHICLE_SLEEPER_CAPACITY = "vehicle_sleeper_capacity";
  @SerializedName(SERIALIZED_NAME_VEHICLE_SLEEPER_CAPACITY)
  private String vehicleSleeperCapacity;

  public static final String SERIALIZED_NAME_VEHICLE_STANDING_CAPACITY = "vehicle_standing_capacity";
  @SerializedName(SERIALIZED_NAME_VEHICLE_STANDING_CAPACITY)
  private String vehicleStandingCapacity;

  public static final String SERIALIZED_NAME_WHEELBASE = "wheelbase";
  @SerializedName(SERIALIZED_NAME_WHEELBASE)
  private String wheelbase;

  public static final String SERIALIZED_NAME_VEHICLE_NUMBER = "vehicle_number";
  @SerializedName(SERIALIZED_NAME_VEHICLE_NUMBER)
  private String vehicleNumber;

  public static final String SERIALIZED_NAME_PUCC_NUMBER = "pucc_number";
  @SerializedName(SERIALIZED_NAME_PUCC_NUMBER)
  private String puccNumber;

  public static final String SERIALIZED_NAME_PUCC_UPTO = "pucc_upto";
  @SerializedName(SERIALIZED_NAME_PUCC_UPTO)
  private String puccUpto;

  public static final String SERIALIZED_NAME_BLACKLIST_STATUS = "blacklist_status";
  @SerializedName(SERIALIZED_NAME_BLACKLIST_STATUS)
  private String blacklistStatus;

  public static final String SERIALIZED_NAME_BLACKLIST_DETAILS = "blacklist_details";
  @SerializedName(SERIALIZED_NAME_BLACKLIST_DETAILS)
  private Object blacklistDetails;

  public static final String SERIALIZED_NAME_CHALLAN_DETAILS = "challan_details";
  @SerializedName(SERIALIZED_NAME_CHALLAN_DETAILS)
  private Object challanDetails;

  public static final String SERIALIZED_NAME_PERMIT_ISSUE_DATE = "permit_issue_date";
  @SerializedName(SERIALIZED_NAME_PERMIT_ISSUE_DATE)
  private String permitIssueDate;

  public static final String SERIALIZED_NAME_PERMIT_NUMBER = "permit_number";
  @SerializedName(SERIALIZED_NAME_PERMIT_NUMBER)
  private String permitNumber;

  public static final String SERIALIZED_NAME_PERMIT_TYPE = "permit_type";
  @SerializedName(SERIALIZED_NAME_PERMIT_TYPE)
  private String permitType;

  public static final String SERIALIZED_NAME_PERMIT_VALID_FROM = "permit_valid_from";
  @SerializedName(SERIALIZED_NAME_PERMIT_VALID_FROM)
  private String permitValidFrom;

  public static final String SERIALIZED_NAME_PERMIT_VALID_UPTO = "permit_valid_upto";
  @SerializedName(SERIALIZED_NAME_PERMIT_VALID_UPTO)
  private String permitValidUpto;

  public static final String SERIALIZED_NAME_NON_USE_STATUS = "non_use_status";
  @SerializedName(SERIALIZED_NAME_NON_USE_STATUS)
  private String nonUseStatus;

  public static final String SERIALIZED_NAME_NON_USE_FROM = "non_use_from";
  @SerializedName(SERIALIZED_NAME_NON_USE_FROM)
  private String nonUseFrom;

  public static final String SERIALIZED_NAME_NON_USE_TO = "non_use_to";
  @SerializedName(SERIALIZED_NAME_NON_USE_TO)
  private String nonUseTo;

  public static final String SERIALIZED_NAME_NATIONAL_PERMIT_NUMBER = "national_permit_number";
  @SerializedName(SERIALIZED_NAME_NATIONAL_PERMIT_NUMBER)
  private String nationalPermitNumber;

  public static final String SERIALIZED_NAME_NATIONAL_PERMIT_UPTO = "national_permit_upto";
  @SerializedName(SERIALIZED_NAME_NATIONAL_PERMIT_UPTO)
  private String nationalPermitUpto;

  public static final String SERIALIZED_NAME_NATIONAL_PERMIT_ISSUED_BY = "national_permit_issued_by";
  @SerializedName(SERIALIZED_NAME_NATIONAL_PERMIT_ISSUED_BY)
  private String nationalPermitIssuedBy;

  public static final String SERIALIZED_NAME_IS_COMMERCIAL = "is_commercial";
  @SerializedName(SERIALIZED_NAME_IS_COMMERCIAL)
  private Boolean isCommercial;

  public static final String SERIALIZED_NAME_NOC_DETAILS = "noc_details";
  @SerializedName(SERIALIZED_NAME_NOC_DETAILS)
  private String nocDetails;

  public VehicleRcResponseSchema() {
  }

  public VehicleRcResponseSchema verificationId(String verificationId) {
    
    this.verificationId = verificationId;
    return this;
  }

   /**
   * It displays the unique ID you created to identify the verification request.
   * @return verificationId
  **/
  @javax.annotation.Nullable
  @Schema(example = "6c617137-6d50-4c59-9302-c453ca42aa8589", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the unique ID you created to identify the verification request.")
  public String getVerificationId() {
    return verificationId;
  }


  public void setVerificationId(String verificationId) {
    this.verificationId = verificationId;
  }


  public VehicleRcResponseSchema referenceId(Integer referenceId) {
    
    this.referenceId = referenceId;
    return this;
  }

   /**
   * It displays the unique ID created by Cashfree Payments for reference purposes.
   * @return referenceId
  **/
  @javax.annotation.Nullable
  @Schema(example = "88", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the unique ID created by Cashfree Payments for reference purposes.")
  public Integer getReferenceId() {
    return referenceId;
  }


  public void setReferenceId(Integer referenceId) {
    this.referenceId = referenceId;
  }


  public VehicleRcResponseSchema status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * It displays the status of the vehicle RC information.
   * @return status
  **/
  @javax.annotation.Nullable
  @Schema(example = "VALID", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the status of the vehicle RC information.")
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public VehicleRcResponseSchema regNo(String regNo) {
    
    this.regNo = regNo;
    return this;
  }

   /**
   * It displays the registration number of the vehicle.
   * @return regNo
  **/
  @javax.annotation.Nullable
  @Schema(example = "KA01MW6127", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the registration number of the vehicle.")
  public String getRegNo() {
    return regNo;
  }


  public void setRegNo(String regNo) {
    this.regNo = regNo;
  }


  public VehicleRcResponseSchema propertyClass(String propertyClass) {
    
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * It displays the category or type of the vehicle as recognised by the relevant transportation authorities.
   * @return propertyClass
  **/
  @javax.annotation.Nullable
  @Schema(example = "Motor Car", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the category or type of the vehicle as recognised by the relevant transportation authorities.")
  public String getPropertyClass() {
    return propertyClass;
  }


  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public VehicleRcResponseSchema chassis(String chassis) {
    
    this.chassis = chassis;
    return this;
  }

   /**
   * It displays the chassis information of the vehicle.
   * @return chassis
  **/
  @javax.annotation.Nullable
  @Schema(example = "MALBK511VMM110528", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the chassis information of the vehicle.")
  public String getChassis() {
    return chassis;
  }


  public void setChassis(String chassis) {
    this.chassis = chassis;
  }


  public VehicleRcResponseSchema engine(String engine) {
    
    this.engine = engine;
    return this;
  }

   /**
   * It displays the engine number of the vehicle.
   * @return engine
  **/
  @javax.annotation.Nullable
  @Schema(example = "G3LCMM440323", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the engine number of the vehicle.")
  public String getEngine() {
    return engine;
  }


  public void setEngine(String engine) {
    this.engine = engine;
  }


  public VehicleRcResponseSchema vehicleManufacturerName(String vehicleManufacturerName) {
    
    this.vehicleManufacturerName = vehicleManufacturerName;
    return this;
  }

   /**
   * It displays the manufacturer of the vehicle.
   * @return vehicleManufacturerName
  **/
  @javax.annotation.Nullable
  @Schema(example = "HYUNDAI MOTOR INDIA LTD", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the manufacturer of the vehicle.")
  public String getVehicleManufacturerName() {
    return vehicleManufacturerName;
  }


  public void setVehicleManufacturerName(String vehicleManufacturerName) {
    this.vehicleManufacturerName = vehicleManufacturerName;
  }


  public VehicleRcResponseSchema model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * It displays the model number of the vehicle.
   * @return model
  **/
  @javax.annotation.Nullable
  @Schema(example = "I20 N LINE N8 1.0TURBO GDI DCT", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the model number of the vehicle.")
  public String getModel() {
    return model;
  }


  public void setModel(String model) {
    this.model = model;
  }


  public VehicleRcResponseSchema vehicleColor(String vehicleColor) {
    
    this.vehicleColor = vehicleColor;
    return this;
  }

   /**
   * It displays the colour of the vehicle.
   * @return vehicleColor
  **/
  @javax.annotation.Nullable
  @Schema(example = "TITAN GREY", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the colour of the vehicle.")
  public String getVehicleColor() {
    return vehicleColor;
  }


  public void setVehicleColor(String vehicleColor) {
    this.vehicleColor = vehicleColor;
  }


  public VehicleRcResponseSchema type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * It displays the type of the vehicle.
   * @return type
  **/
  @javax.annotation.Nullable
  @Schema(example = "PETROL", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the type of the vehicle.")
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public VehicleRcResponseSchema normsType(String normsType) {
    
    this.normsType = normsType;
    return this;
  }

   /**
   * It displays the norms set by the Central Pollution Control Board (CPCB)
   * @return normsType
  **/
  @javax.annotation.Nullable
  @Schema(example = "BHARAT STAGE VI", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the norms set by the Central Pollution Control Board (CPCB)")
  public String getNormsType() {
    return normsType;
  }


  public void setNormsType(String normsType) {
    this.normsType = normsType;
  }


  public VehicleRcResponseSchema bodyType(String bodyType) {
    
    this.bodyType = bodyType;
    return this;
  }

   /**
   * It displays the body type of the vehicle.
   * @return bodyType
  **/
  @javax.annotation.Nullable
  @Schema(example = "HATCHBACK", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the body type of the vehicle.")
  public String getBodyType() {
    return bodyType;
  }


  public void setBodyType(String bodyType) {
    this.bodyType = bodyType;
  }


  public VehicleRcResponseSchema ownerCount(String ownerCount) {
    
    this.ownerCount = ownerCount;
    return this;
  }

   /**
   * It displays the number of owners of the vehicle.
   * @return ownerCount
  **/
  @javax.annotation.Nullable
  @Schema(example = "1", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the number of owners of the vehicle.")
  public String getOwnerCount() {
    return ownerCount;
  }


  public void setOwnerCount(String ownerCount) {
    this.ownerCount = ownerCount;
  }


  public VehicleRcResponseSchema owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * It displays the name of the current owner of the vehicle.
   * @return owner
  **/
  @javax.annotation.Nullable
  @Schema(example = "RAGHAV RASTOGI", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name of the current owner of the vehicle.")
  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  public VehicleRcResponseSchema ownerFatherName(String ownerFatherName) {
    
    this.ownerFatherName = ownerFatherName;
    return this;
  }

   /**
   * It displays the father&#39;s name of the current owner of the vehicle.
   * @return ownerFatherName
  **/
  @javax.annotation.Nullable
  @Schema(example = "ROHIT RASTOGI", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the father's name of the current owner of the vehicle.")
  public String getOwnerFatherName() {
    return ownerFatherName;
  }


  public void setOwnerFatherName(String ownerFatherName) {
    this.ownerFatherName = ownerFatherName;
  }


  public VehicleRcResponseSchema mobileNumber(String mobileNumber) {
    
    this.mobileNumber = mobileNumber;
    return this;
  }

   /**
   * It displays the mobile number of the current owner of the vehicle.
   * @return mobileNumber
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the mobile number of the current owner of the vehicle.")
  public String getMobileNumber() {
    return mobileNumber;
  }


  public void setMobileNumber(String mobileNumber) {
    this.mobileNumber = mobileNumber;
  }


  public VehicleRcResponseSchema rcStatus(String rcStatus) {
    
    this.rcStatus = rcStatus;
    return this;
  }

   /**
   * It displays the status of the RC.
   * @return rcStatus
  **/
  @javax.annotation.Nullable
  @Schema(example = "ACTIVE", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the status of the RC.")
  public String getRcStatus() {
    return rcStatus;
  }


  public void setRcStatus(String rcStatus) {
    this.rcStatus = rcStatus;
  }


  public VehicleRcResponseSchema statusAsOn(String statusAsOn) {
    
    this.statusAsOn = statusAsOn;
    return this;
  }

   /**
   * It displays the particular date of the status of the RC.
   * @return statusAsOn
  **/
  @javax.annotation.Nullable
  @Schema(example = "19/01/2024", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the particular date of the status of the RC.")
  public String getStatusAsOn() {
    return statusAsOn;
  }


  public void setStatusAsOn(String statusAsOn) {
    this.statusAsOn = statusAsOn;
  }


  public VehicleRcResponseSchema regAuthority(String regAuthority) {
    
    this.regAuthority = regAuthority;
    return this;
  }

   /**
   * It displays the name of the registration authority.
   * @return regAuthority
  **/
  @javax.annotation.Nullable
  @Schema(example = "BENGALURU CENTRAL RTO, Karnataka", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name of the registration authority.")
  public String getRegAuthority() {
    return regAuthority;
  }


  public void setRegAuthority(String regAuthority) {
    this.regAuthority = regAuthority;
  }


  public VehicleRcResponseSchema regDate(String regDate) {
    
    this.regDate = regDate;
    return this;
  }

   /**
   * It displays the date of registration of the vehicle.
   * @return regDate
  **/
  @javax.annotation.Nullable
  @Schema(example = "24/12/2021", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the date of registration of the vehicle.")
  public String getRegDate() {
    return regDate;
  }


  public void setRegDate(String regDate) {
    this.regDate = regDate;
  }


  public VehicleRcResponseSchema vehicleManufacturingMonthYear(String vehicleManufacturingMonthYear) {
    
    this.vehicleManufacturingMonthYear = vehicleManufacturingMonthYear;
    return this;
  }

   /**
   * It displays the month and year of the manufacturing of the vehicle.
   * @return vehicleManufacturingMonthYear
  **/
  @javax.annotation.Nullable
  @Schema(example = "12/2021", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the month and year of the manufacturing of the vehicle.")
  public String getVehicleManufacturingMonthYear() {
    return vehicleManufacturingMonthYear;
  }


  public void setVehicleManufacturingMonthYear(String vehicleManufacturingMonthYear) {
    this.vehicleManufacturingMonthYear = vehicleManufacturingMonthYear;
  }


  public VehicleRcResponseSchema rcExpiryDate(String rcExpiryDate) {
    
    this.rcExpiryDate = rcExpiryDate;
    return this;
  }

   /**
   * It displays the date until which the registration of the vehicle is valid.
   * @return rcExpiryDate
  **/
  @javax.annotation.Nullable
  @Schema(example = "23/12/2036", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the date until which the registration of the vehicle is valid.")
  public String getRcExpiryDate() {
    return rcExpiryDate;
  }


  public void setRcExpiryDate(String rcExpiryDate) {
    this.rcExpiryDate = rcExpiryDate;
  }


  public VehicleRcResponseSchema vehicleTaxUpto(String vehicleTaxUpto) {
    
    this.vehicleTaxUpto = vehicleTaxUpto;
    return this;
  }

   /**
   * It displays the date until which the tax paid by the owner for the vehicle is valid.
   * @return vehicleTaxUpto
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the date until which the tax paid by the owner for the vehicle is valid.")
  public String getVehicleTaxUpto() {
    return vehicleTaxUpto;
  }


  public void setVehicleTaxUpto(String vehicleTaxUpto) {
    this.vehicleTaxUpto = vehicleTaxUpto;
  }


  public VehicleRcResponseSchema vehicleInsuranceCompanyName(String vehicleInsuranceCompanyName) {
    
    this.vehicleInsuranceCompanyName = vehicleInsuranceCompanyName;
    return this;
  }

   /**
   * It displays the name of the insurance company associated with the vehicle.
   * @return vehicleInsuranceCompanyName
  **/
  @javax.annotation.Nullable
  @Schema(example = "TATA AIG GENERAL INSURANCE CO. LTD.", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name of the insurance company associated with the vehicle.")
  public String getVehicleInsuranceCompanyName() {
    return vehicleInsuranceCompanyName;
  }


  public void setVehicleInsuranceCompanyName(String vehicleInsuranceCompanyName) {
    this.vehicleInsuranceCompanyName = vehicleInsuranceCompanyName;
  }


  public VehicleRcResponseSchema vehicleInsuranceUpto(String vehicleInsuranceUpto) {
    
    this.vehicleInsuranceUpto = vehicleInsuranceUpto;
    return this;
  }

   /**
   * It displays the date until which the insurance paid by the owner for the vehicle is valid.
   * @return vehicleInsuranceUpto
  **/
  @javax.annotation.Nullable
  @Schema(example = "14/12/2024", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the date until which the insurance paid by the owner for the vehicle is valid.")
  public String getVehicleInsuranceUpto() {
    return vehicleInsuranceUpto;
  }


  public void setVehicleInsuranceUpto(String vehicleInsuranceUpto) {
    this.vehicleInsuranceUpto = vehicleInsuranceUpto;
  }


  public VehicleRcResponseSchema vehicleInsurancePolicyNumber(String vehicleInsurancePolicyNumber) {
    
    this.vehicleInsurancePolicyNumber = vehicleInsurancePolicyNumber;
    return this;
  }

   /**
   * It displays the insurance policy number of the vehicle.
   * @return vehicleInsurancePolicyNumber
  **/
  @javax.annotation.Nullable
  @Schema(example = "62000344820000", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the insurance policy number of the vehicle.")
  public String getVehicleInsurancePolicyNumber() {
    return vehicleInsurancePolicyNumber;
  }


  public void setVehicleInsurancePolicyNumber(String vehicleInsurancePolicyNumber) {
    this.vehicleInsurancePolicyNumber = vehicleInsurancePolicyNumber;
  }


  public VehicleRcResponseSchema rcFinancer(String rcFinancer) {
    
    this.rcFinancer = rcFinancer;
    return this;
  }

   /**
   * It displays the name of the financial institution or lender that provided financing for the purchase of a vehicle.
   * @return rcFinancer
  **/
  @javax.annotation.Nullable
  @Schema(example = "BANDHAN BANK", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name of the financial institution or lender that provided financing for the purchase of a vehicle.")
  public String getRcFinancer() {
    return rcFinancer;
  }


  public void setRcFinancer(String rcFinancer) {
    this.rcFinancer = rcFinancer;
  }


  public VehicleRcResponseSchema presentAddress(String presentAddress) {
    
    this.presentAddress = presentAddress;
    return this;
  }

   /**
   * It displays the current address of the owner of the vehicle.
   * @return presentAddress
  **/
  @javax.annotation.Nullable
  @Schema(example = "FLAT # 901 A BLOCK GOYAL ORCHID, LAKE VIEW APTS KARIAGRAHARA, BELLANDUR, Bangalore, Karnataka, 560103", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the current address of the owner of the vehicle.")
  public String getPresentAddress() {
    return presentAddress;
  }


  public void setPresentAddress(String presentAddress) {
    this.presentAddress = presentAddress;
  }


  public VehicleRcResponseSchema splitPresentAddress(SplitAddress splitPresentAddress) {
    
    this.splitPresentAddress = splitPresentAddress;
    return this;
  }

   /**
   * Get splitPresentAddress
   * @return splitPresentAddress
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public SplitAddress getSplitPresentAddress() {
    return splitPresentAddress;
  }


  public void setSplitPresentAddress(SplitAddress splitPresentAddress) {
    this.splitPresentAddress = splitPresentAddress;
  }


  public VehicleRcResponseSchema permanentAddress(String permanentAddress) {
    
    this.permanentAddress = permanentAddress;
    return this;
  }

   /**
   * It displays the permanent address of the owner of the vehicle.
   * @return permanentAddress
  **/
  @javax.annotation.Nullable
  @Schema(example = "FLAT # 901 A BLOCK GOYAL ORCHID, LAKE VIEW APTS KARIAGRAHARA, BELLANDUR, Bangalore, Karnataka, 560103", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the permanent address of the owner of the vehicle.")
  public String getPermanentAddress() {
    return permanentAddress;
  }


  public void setPermanentAddress(String permanentAddress) {
    this.permanentAddress = permanentAddress;
  }


  public VehicleRcResponseSchema splitPermanentAddress(SplitAddress splitPermanentAddress) {
    
    this.splitPermanentAddress = splitPermanentAddress;
    return this;
  }

   /**
   * Get splitPermanentAddress
   * @return splitPermanentAddress
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public SplitAddress getSplitPermanentAddress() {
    return splitPermanentAddress;
  }


  public void setSplitPermanentAddress(SplitAddress splitPermanentAddress) {
    this.splitPermanentAddress = splitPermanentAddress;
  }


  public VehicleRcResponseSchema vehicleCubicCapacity(String vehicleCubicCapacity) {
    
    this.vehicleCubicCapacity = vehicleCubicCapacity;
    return this;
  }

   /**
   * It displays the cubic capacity of the vehicle&#39;s engine.
   * @return vehicleCubicCapacity
  **/
  @javax.annotation.Nullable
  @Schema(example = "998", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the cubic capacity of the vehicle's engine.")
  public String getVehicleCubicCapacity() {
    return vehicleCubicCapacity;
  }


  public void setVehicleCubicCapacity(String vehicleCubicCapacity) {
    this.vehicleCubicCapacity = vehicleCubicCapacity;
  }


  public VehicleRcResponseSchema grossVehicleWeight(String grossVehicleWeight) {
    
    this.grossVehicleWeight = grossVehicleWeight;
    return this;
  }

   /**
   * It displays the gross weight of the vehicle in kilograms.
   * @return grossVehicleWeight
  **/
  @javax.annotation.Nullable
  @Schema(example = "1490", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the gross weight of the vehicle in kilograms.")
  public String getGrossVehicleWeight() {
    return grossVehicleWeight;
  }


  public void setGrossVehicleWeight(String grossVehicleWeight) {
    this.grossVehicleWeight = grossVehicleWeight;
  }


  public VehicleRcResponseSchema unladenWeight(String unladenWeight) {
    
    this.unladenWeight = unladenWeight;
    return this;
  }

   /**
   * It displays the weight of the vehicle without carrying any load in kiolgrams.
   * @return unladenWeight
  **/
  @javax.annotation.Nullable
  @Schema(example = "1086", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the weight of the vehicle without carrying any load in kiolgrams.")
  public String getUnladenWeight() {
    return unladenWeight;
  }


  public void setUnladenWeight(String unladenWeight) {
    this.unladenWeight = unladenWeight;
  }


  public VehicleRcResponseSchema vehicleCategory(String vehicleCategory) {
    
    this.vehicleCategory = vehicleCategory;
    return this;
  }

   /**
   * It displays the category of the vehicle.
   * @return vehicleCategory
  **/
  @javax.annotation.Nullable
  @Schema(example = "LMV", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the category of the vehicle.")
  public String getVehicleCategory() {
    return vehicleCategory;
  }


  public void setVehicleCategory(String vehicleCategory) {
    this.vehicleCategory = vehicleCategory;
  }


  public VehicleRcResponseSchema rcStandardCap(String rcStandardCap) {
    
    this.rcStandardCap = rcStandardCap;
    return this;
  }

   /**
   * Get rcStandardCap
   * @return rcStandardCap
  **/
  @javax.annotation.Nullable
  @Schema(example = "0", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public String getRcStandardCap() {
    return rcStandardCap;
  }


  public void setRcStandardCap(String rcStandardCap) {
    this.rcStandardCap = rcStandardCap;
  }


  public VehicleRcResponseSchema vehicleCylindersNo(String vehicleCylindersNo) {
    
    this.vehicleCylindersNo = vehicleCylindersNo;
    return this;
  }

   /**
   * It displays the number of cylinders present in the vehicle.
   * @return vehicleCylindersNo
  **/
  @javax.annotation.Nullable
  @Schema(example = "3", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the number of cylinders present in the vehicle.")
  public String getVehicleCylindersNo() {
    return vehicleCylindersNo;
  }


  public void setVehicleCylindersNo(String vehicleCylindersNo) {
    this.vehicleCylindersNo = vehicleCylindersNo;
  }


  public VehicleRcResponseSchema vehicleSeatCapacity(String vehicleSeatCapacity) {
    
    this.vehicleSeatCapacity = vehicleSeatCapacity;
    return this;
  }

   /**
   * It displays the number of seats in the vehicle.
   * @return vehicleSeatCapacity
  **/
  @javax.annotation.Nullable
  @Schema(example = "5", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the number of seats in the vehicle.")
  public String getVehicleSeatCapacity() {
    return vehicleSeatCapacity;
  }


  public void setVehicleSeatCapacity(String vehicleSeatCapacity) {
    this.vehicleSeatCapacity = vehicleSeatCapacity;
  }


  public VehicleRcResponseSchema vehicleSleeperCapacity(String vehicleSleeperCapacity) {
    
    this.vehicleSleeperCapacity = vehicleSleeperCapacity;
    return this;
  }

   /**
   * It displays the number of beds available in the vehicle.
   * @return vehicleSleeperCapacity
  **/
  @javax.annotation.Nullable
  @Schema(example = "0", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the number of beds available in the vehicle.")
  public String getVehicleSleeperCapacity() {
    return vehicleSleeperCapacity;
  }


  public void setVehicleSleeperCapacity(String vehicleSleeperCapacity) {
    this.vehicleSleeperCapacity = vehicleSleeperCapacity;
  }


  public VehicleRcResponseSchema vehicleStandingCapacity(String vehicleStandingCapacity) {
    
    this.vehicleStandingCapacity = vehicleStandingCapacity;
    return this;
  }

   /**
   * It displays the number of people that can stand in the vehicle.
   * @return vehicleStandingCapacity
  **/
  @javax.annotation.Nullable
  @Schema(example = "0", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the number of people that can stand in the vehicle.")
  public String getVehicleStandingCapacity() {
    return vehicleStandingCapacity;
  }


  public void setVehicleStandingCapacity(String vehicleStandingCapacity) {
    this.vehicleStandingCapacity = vehicleStandingCapacity;
  }


  public VehicleRcResponseSchema wheelbase(String wheelbase) {
    
    this.wheelbase = wheelbase;
    return this;
  }

   /**
   * It displays distance between the front and rear axles of a vehicle in mm.
   * @return wheelbase
  **/
  @javax.annotation.Nullable
  @Schema(example = "2580", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays distance between the front and rear axles of a vehicle in mm.")
  public String getWheelbase() {
    return wheelbase;
  }


  public void setWheelbase(String wheelbase) {
    this.wheelbase = wheelbase;
  }


  public VehicleRcResponseSchema vehicleNumber(String vehicleNumber) {
    
    this.vehicleNumber = vehicleNumber;
    return this;
  }

   /**
   * It displays the registration number of the vehicle.
   * @return vehicleNumber
  **/
  @javax.annotation.Nullable
  @Schema(example = "KA01MW6127", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the registration number of the vehicle.")
  public String getVehicleNumber() {
    return vehicleNumber;
  }


  public void setVehicleNumber(String vehicleNumber) {
    this.vehicleNumber = vehicleNumber;
  }


  public VehicleRcResponseSchema puccNumber(String puccNumber) {
    
    this.puccNumber = puccNumber;
    return this;
  }

   /**
   * It displays the Pollution Under Control Certificate (PUCC) number associated with vehicle.
   * @return puccNumber
  **/
  @javax.annotation.Nullable
  @Schema(example = "Newv4", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the Pollution Under Control Certificate (PUCC) number associated with vehicle.")
  public String getPuccNumber() {
    return puccNumber;
  }


  public void setPuccNumber(String puccNumber) {
    this.puccNumber = puccNumber;
  }


  public VehicleRcResponseSchema puccUpto(String puccUpto) {
    
    this.puccUpto = puccUpto;
    return this;
  }

   /**
   * It displays till when the PUCC number is valid.
   * @return puccUpto
  **/
  @javax.annotation.Nullable
  @Schema(example = "23/12/2022", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays till when the PUCC number is valid.")
  public String getPuccUpto() {
    return puccUpto;
  }


  public void setPuccUpto(String puccUpto) {
    this.puccUpto = puccUpto;
  }


  public VehicleRcResponseSchema blacklistStatus(String blacklistStatus) {
    
    this.blacklistStatus = blacklistStatus;
    return this;
  }

   /**
   * It displays whether the vehicle is blacklisted.
   * @return blacklistStatus
  **/
  @javax.annotation.Nullable
  @Schema(example = "NA", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays whether the vehicle is blacklisted.")
  public String getBlacklistStatus() {
    return blacklistStatus;
  }


  public void setBlacklistStatus(String blacklistStatus) {
    this.blacklistStatus = blacklistStatus;
  }


  public VehicleRcResponseSchema blacklistDetails(Object blacklistDetails) {
    
    this.blacklistDetails = blacklistDetails;
    return this;
  }

   /**
   * It displays the reasons for blacklisting the vehicle.
   * @return blacklistDetails
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the reasons for blacklisting the vehicle.")
  public Object getBlacklistDetails() {
    return blacklistDetails;
  }


  public void setBlacklistDetails(Object blacklistDetails) {
    this.blacklistDetails = blacklistDetails;
  }


  public VehicleRcResponseSchema challanDetails(Object challanDetails) {
    
    this.challanDetails = challanDetails;
    return this;
  }

   /**
   * It displays traffic tickets or citations issued by traffic police or authorities for various traffic violations.
   * @return challanDetails
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays traffic tickets or citations issued by traffic police or authorities for various traffic violations.")
  public Object getChallanDetails() {
    return challanDetails;
  }


  public void setChallanDetails(Object challanDetails) {
    this.challanDetails = challanDetails;
  }


  public VehicleRcResponseSchema permitIssueDate(String permitIssueDate) {
    
    this.permitIssueDate = permitIssueDate;
    return this;
  }

   /**
   * It displays when the relevant authorities granted permission or authorisation for a specific type of permit associated with the vehicle.
   * @return permitIssueDate
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays when the relevant authorities granted permission or authorisation for a specific type of permit associated with the vehicle.")
  public String getPermitIssueDate() {
    return permitIssueDate;
  }


  public void setPermitIssueDate(String permitIssueDate) {
    this.permitIssueDate = permitIssueDate;
  }


  public VehicleRcResponseSchema permitNumber(String permitNumber) {
    
    this.permitNumber = permitNumber;
    return this;
  }

   /**
   * It displays the permit number of the vehicle.
   * @return permitNumber
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the permit number of the vehicle.")
  public String getPermitNumber() {
    return permitNumber;
  }


  public void setPermitNumber(String permitNumber) {
    this.permitNumber = permitNumber;
  }


  public VehicleRcResponseSchema permitType(String permitType) {
    
    this.permitType = permitType;
    return this;
  }

   /**
   * It displays the type of permit issued to the vehicle.
   * @return permitType
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the type of permit issued to the vehicle.")
  public String getPermitType() {
    return permitType;
  }


  public void setPermitType(String permitType) {
    this.permitType = permitType;
  }


  public VehicleRcResponseSchema permitValidFrom(String permitValidFrom) {
    
    this.permitValidFrom = permitValidFrom;
    return this;
  }

   /**
   * It displays the beginning date of the issuance of permit.
   * @return permitValidFrom
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the beginning date of the issuance of permit.")
  public String getPermitValidFrom() {
    return permitValidFrom;
  }


  public void setPermitValidFrom(String permitValidFrom) {
    this.permitValidFrom = permitValidFrom;
  }


  public VehicleRcResponseSchema permitValidUpto(String permitValidUpto) {
    
    this.permitValidUpto = permitValidUpto;
    return this;
  }

   /**
   * It displays the end date of the permit.
   * @return permitValidUpto
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the end date of the permit.")
  public String getPermitValidUpto() {
    return permitValidUpto;
  }


  public void setPermitValidUpto(String permitValidUpto) {
    this.permitValidUpto = permitValidUpto;
  }


  public VehicleRcResponseSchema nonUseStatus(String nonUseStatus) {
    
    this.nonUseStatus = nonUseStatus;
    return this;
  }

   /**
   * It displays whether the vehicle owner or registrant declared that the vehicle is not in use for a certain period.
   * @return nonUseStatus
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays whether the vehicle owner or registrant declared that the vehicle is not in use for a certain period.")
  public String getNonUseStatus() {
    return nonUseStatus;
  }


  public void setNonUseStatus(String nonUseStatus) {
    this.nonUseStatus = nonUseStatus;
  }


  public VehicleRcResponseSchema nonUseFrom(String nonUseFrom) {
    
    this.nonUseFrom = nonUseFrom;
    return this;
  }

   /**
   * It displays the beginning date of the non use period.
   * @return nonUseFrom
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the beginning date of the non use period.")
  public String getNonUseFrom() {
    return nonUseFrom;
  }


  public void setNonUseFrom(String nonUseFrom) {
    this.nonUseFrom = nonUseFrom;
  }


  public VehicleRcResponseSchema nonUseTo(String nonUseTo) {
    
    this.nonUseTo = nonUseTo;
    return this;
  }

   /**
   * It displays the end date of the non use period.
   * @return nonUseTo
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the end date of the non use period.")
  public String getNonUseTo() {
    return nonUseTo;
  }


  public void setNonUseTo(String nonUseTo) {
    this.nonUseTo = nonUseTo;
  }


  public VehicleRcResponseSchema nationalPermitNumber(String nationalPermitNumber) {
    
    this.nationalPermitNumber = nationalPermitNumber;
    return this;
  }

   /**
   * It displays the permit issued to the vehicle to go outside the home state carrying goods.
   * @return nationalPermitNumber
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the permit issued to the vehicle to go outside the home state carrying goods.")
  public String getNationalPermitNumber() {
    return nationalPermitNumber;
  }


  public void setNationalPermitNumber(String nationalPermitNumber) {
    this.nationalPermitNumber = nationalPermitNumber;
  }


  public VehicleRcResponseSchema nationalPermitUpto(String nationalPermitUpto) {
    
    this.nationalPermitUpto = nationalPermitUpto;
    return this;
  }

   /**
   * It displays the end date of the permit issued to the vechicle to go outside the home state carrying goods.
   * @return nationalPermitUpto
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the end date of the permit issued to the vechicle to go outside the home state carrying goods.")
  public String getNationalPermitUpto() {
    return nationalPermitUpto;
  }


  public void setNationalPermitUpto(String nationalPermitUpto) {
    this.nationalPermitUpto = nationalPermitUpto;
  }


  public VehicleRcResponseSchema nationalPermitIssuedBy(String nationalPermitIssuedBy) {
    
    this.nationalPermitIssuedBy = nationalPermitIssuedBy;
    return this;
  }

   /**
   * It displays the national permit issuer&#39;s name.
   * @return nationalPermitIssuedBy
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the national permit issuer's name.")
  public String getNationalPermitIssuedBy() {
    return nationalPermitIssuedBy;
  }


  public void setNationalPermitIssuedBy(String nationalPermitIssuedBy) {
    this.nationalPermitIssuedBy = nationalPermitIssuedBy;
  }


  public VehicleRcResponseSchema isCommercial(Boolean isCommercial) {
    
    this.isCommercial = isCommercial;
    return this;
  }

   /**
   * It displays whether the vehicle is for commercial purpose.
   * @return isCommercial
  **/
  @javax.annotation.Nullable
  @Schema(example = "false", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays whether the vehicle is for commercial purpose.")
  public Boolean getIsCommercial() {
    return isCommercial;
  }


  public void setIsCommercial(Boolean isCommercial) {
    this.isCommercial = isCommercial;
  }


  public VehicleRcResponseSchema nocDetails(String nocDetails) {
    
    this.nocDetails = nocDetails;
    return this;
  }

   /**
   * It displays the details of the no objection certificate.
   * @return nocDetails
  **/
  @javax.annotation.Nullable
  @Schema(example = "", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the details of the no objection certificate.")
  public String getNocDetails() {
    return nocDetails;
  }


  public void setNocDetails(String nocDetails) {
    this.nocDetails = nocDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VehicleRcResponseSchema vehicleRcResponseSchema = (VehicleRcResponseSchema) o;
    return Objects.equals(this.verificationId, vehicleRcResponseSchema.verificationId) &&
        Objects.equals(this.referenceId, vehicleRcResponseSchema.referenceId) &&
        Objects.equals(this.status, vehicleRcResponseSchema.status) &&
        Objects.equals(this.regNo, vehicleRcResponseSchema.regNo) &&
        Objects.equals(this.propertyClass, vehicleRcResponseSchema.propertyClass) &&
        Objects.equals(this.chassis, vehicleRcResponseSchema.chassis) &&
        Objects.equals(this.engine, vehicleRcResponseSchema.engine) &&
        Objects.equals(this.vehicleManufacturerName, vehicleRcResponseSchema.vehicleManufacturerName) &&
        Objects.equals(this.model, vehicleRcResponseSchema.model) &&
        Objects.equals(this.vehicleColor, vehicleRcResponseSchema.vehicleColor) &&
        Objects.equals(this.type, vehicleRcResponseSchema.type) &&
        Objects.equals(this.normsType, vehicleRcResponseSchema.normsType) &&
        Objects.equals(this.bodyType, vehicleRcResponseSchema.bodyType) &&
        Objects.equals(this.ownerCount, vehicleRcResponseSchema.ownerCount) &&
        Objects.equals(this.owner, vehicleRcResponseSchema.owner) &&
        Objects.equals(this.ownerFatherName, vehicleRcResponseSchema.ownerFatherName) &&
        Objects.equals(this.mobileNumber, vehicleRcResponseSchema.mobileNumber) &&
        Objects.equals(this.rcStatus, vehicleRcResponseSchema.rcStatus) &&
        Objects.equals(this.statusAsOn, vehicleRcResponseSchema.statusAsOn) &&
        Objects.equals(this.regAuthority, vehicleRcResponseSchema.regAuthority) &&
        Objects.equals(this.regDate, vehicleRcResponseSchema.regDate) &&
        Objects.equals(this.vehicleManufacturingMonthYear, vehicleRcResponseSchema.vehicleManufacturingMonthYear) &&
        Objects.equals(this.rcExpiryDate, vehicleRcResponseSchema.rcExpiryDate) &&
        Objects.equals(this.vehicleTaxUpto, vehicleRcResponseSchema.vehicleTaxUpto) &&
        Objects.equals(this.vehicleInsuranceCompanyName, vehicleRcResponseSchema.vehicleInsuranceCompanyName) &&
        Objects.equals(this.vehicleInsuranceUpto, vehicleRcResponseSchema.vehicleInsuranceUpto) &&
        Objects.equals(this.vehicleInsurancePolicyNumber, vehicleRcResponseSchema.vehicleInsurancePolicyNumber) &&
        Objects.equals(this.rcFinancer, vehicleRcResponseSchema.rcFinancer) &&
        Objects.equals(this.presentAddress, vehicleRcResponseSchema.presentAddress) &&
        Objects.equals(this.splitPresentAddress, vehicleRcResponseSchema.splitPresentAddress) &&
        Objects.equals(this.permanentAddress, vehicleRcResponseSchema.permanentAddress) &&
        Objects.equals(this.splitPermanentAddress, vehicleRcResponseSchema.splitPermanentAddress) &&
        Objects.equals(this.vehicleCubicCapacity, vehicleRcResponseSchema.vehicleCubicCapacity) &&
        Objects.equals(this.grossVehicleWeight, vehicleRcResponseSchema.grossVehicleWeight) &&
        Objects.equals(this.unladenWeight, vehicleRcResponseSchema.unladenWeight) &&
        Objects.equals(this.vehicleCategory, vehicleRcResponseSchema.vehicleCategory) &&
        Objects.equals(this.rcStandardCap, vehicleRcResponseSchema.rcStandardCap) &&
        Objects.equals(this.vehicleCylindersNo, vehicleRcResponseSchema.vehicleCylindersNo) &&
        Objects.equals(this.vehicleSeatCapacity, vehicleRcResponseSchema.vehicleSeatCapacity) &&
        Objects.equals(this.vehicleSleeperCapacity, vehicleRcResponseSchema.vehicleSleeperCapacity) &&
        Objects.equals(this.vehicleStandingCapacity, vehicleRcResponseSchema.vehicleStandingCapacity) &&
        Objects.equals(this.wheelbase, vehicleRcResponseSchema.wheelbase) &&
        Objects.equals(this.vehicleNumber, vehicleRcResponseSchema.vehicleNumber) &&
        Objects.equals(this.puccNumber, vehicleRcResponseSchema.puccNumber) &&
        Objects.equals(this.puccUpto, vehicleRcResponseSchema.puccUpto) &&
        Objects.equals(this.blacklistStatus, vehicleRcResponseSchema.blacklistStatus) &&
        Objects.equals(this.blacklistDetails, vehicleRcResponseSchema.blacklistDetails) &&
        Objects.equals(this.challanDetails, vehicleRcResponseSchema.challanDetails) &&
        Objects.equals(this.permitIssueDate, vehicleRcResponseSchema.permitIssueDate) &&
        Objects.equals(this.permitNumber, vehicleRcResponseSchema.permitNumber) &&
        Objects.equals(this.permitType, vehicleRcResponseSchema.permitType) &&
        Objects.equals(this.permitValidFrom, vehicleRcResponseSchema.permitValidFrom) &&
        Objects.equals(this.permitValidUpto, vehicleRcResponseSchema.permitValidUpto) &&
        Objects.equals(this.nonUseStatus, vehicleRcResponseSchema.nonUseStatus) &&
        Objects.equals(this.nonUseFrom, vehicleRcResponseSchema.nonUseFrom) &&
        Objects.equals(this.nonUseTo, vehicleRcResponseSchema.nonUseTo) &&
        Objects.equals(this.nationalPermitNumber, vehicleRcResponseSchema.nationalPermitNumber) &&
        Objects.equals(this.nationalPermitUpto, vehicleRcResponseSchema.nationalPermitUpto) &&
        Objects.equals(this.nationalPermitIssuedBy, vehicleRcResponseSchema.nationalPermitIssuedBy) &&
        Objects.equals(this.isCommercial, vehicleRcResponseSchema.isCommercial) &&
        Objects.equals(this.nocDetails, vehicleRcResponseSchema.nocDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verificationId, referenceId, status, regNo, propertyClass, chassis, engine, vehicleManufacturerName, model, vehicleColor, type, normsType, bodyType, ownerCount, owner, ownerFatherName, mobileNumber, rcStatus, statusAsOn, regAuthority, regDate, vehicleManufacturingMonthYear, rcExpiryDate, vehicleTaxUpto, vehicleInsuranceCompanyName, vehicleInsuranceUpto, vehicleInsurancePolicyNumber, rcFinancer, presentAddress, splitPresentAddress, permanentAddress, splitPermanentAddress, vehicleCubicCapacity, grossVehicleWeight, unladenWeight, vehicleCategory, rcStandardCap, vehicleCylindersNo, vehicleSeatCapacity, vehicleSleeperCapacity, vehicleStandingCapacity, wheelbase, vehicleNumber, puccNumber, puccUpto, blacklistStatus, blacklistDetails, challanDetails, permitIssueDate, permitNumber, permitType, permitValidFrom, permitValidUpto, nonUseStatus, nonUseFrom, nonUseTo, nationalPermitNumber, nationalPermitUpto, nationalPermitIssuedBy, isCommercial, nocDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VehicleRcResponseSchema {\n");
    sb.append("    verificationId: ").append(toIndentedString(verificationId)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    regNo: ").append(toIndentedString(regNo)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    chassis: ").append(toIndentedString(chassis)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    vehicleManufacturerName: ").append(toIndentedString(vehicleManufacturerName)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    vehicleColor: ").append(toIndentedString(vehicleColor)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    normsType: ").append(toIndentedString(normsType)).append("\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    ownerCount: ").append(toIndentedString(ownerCount)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    ownerFatherName: ").append(toIndentedString(ownerFatherName)).append("\n");
    sb.append("    mobileNumber: ").append(toIndentedString(mobileNumber)).append("\n");
    sb.append("    rcStatus: ").append(toIndentedString(rcStatus)).append("\n");
    sb.append("    statusAsOn: ").append(toIndentedString(statusAsOn)).append("\n");
    sb.append("    regAuthority: ").append(toIndentedString(regAuthority)).append("\n");
    sb.append("    regDate: ").append(toIndentedString(regDate)).append("\n");
    sb.append("    vehicleManufacturingMonthYear: ").append(toIndentedString(vehicleManufacturingMonthYear)).append("\n");
    sb.append("    rcExpiryDate: ").append(toIndentedString(rcExpiryDate)).append("\n");
    sb.append("    vehicleTaxUpto: ").append(toIndentedString(vehicleTaxUpto)).append("\n");
    sb.append("    vehicleInsuranceCompanyName: ").append(toIndentedString(vehicleInsuranceCompanyName)).append("\n");
    sb.append("    vehicleInsuranceUpto: ").append(toIndentedString(vehicleInsuranceUpto)).append("\n");
    sb.append("    vehicleInsurancePolicyNumber: ").append(toIndentedString(vehicleInsurancePolicyNumber)).append("\n");
    sb.append("    rcFinancer: ").append(toIndentedString(rcFinancer)).append("\n");
    sb.append("    presentAddress: ").append(toIndentedString(presentAddress)).append("\n");
    sb.append("    splitPresentAddress: ").append(toIndentedString(splitPresentAddress)).append("\n");
    sb.append("    permanentAddress: ").append(toIndentedString(permanentAddress)).append("\n");
    sb.append("    splitPermanentAddress: ").append(toIndentedString(splitPermanentAddress)).append("\n");
    sb.append("    vehicleCubicCapacity: ").append(toIndentedString(vehicleCubicCapacity)).append("\n");
    sb.append("    grossVehicleWeight: ").append(toIndentedString(grossVehicleWeight)).append("\n");
    sb.append("    unladenWeight: ").append(toIndentedString(unladenWeight)).append("\n");
    sb.append("    vehicleCategory: ").append(toIndentedString(vehicleCategory)).append("\n");
    sb.append("    rcStandardCap: ").append(toIndentedString(rcStandardCap)).append("\n");
    sb.append("    vehicleCylindersNo: ").append(toIndentedString(vehicleCylindersNo)).append("\n");
    sb.append("    vehicleSeatCapacity: ").append(toIndentedString(vehicleSeatCapacity)).append("\n");
    sb.append("    vehicleSleeperCapacity: ").append(toIndentedString(vehicleSleeperCapacity)).append("\n");
    sb.append("    vehicleStandingCapacity: ").append(toIndentedString(vehicleStandingCapacity)).append("\n");
    sb.append("    wheelbase: ").append(toIndentedString(wheelbase)).append("\n");
    sb.append("    vehicleNumber: ").append(toIndentedString(vehicleNumber)).append("\n");
    sb.append("    puccNumber: ").append(toIndentedString(puccNumber)).append("\n");
    sb.append("    puccUpto: ").append(toIndentedString(puccUpto)).append("\n");
    sb.append("    blacklistStatus: ").append(toIndentedString(blacklistStatus)).append("\n");
    sb.append("    blacklistDetails: ").append(toIndentedString(blacklistDetails)).append("\n");
    sb.append("    challanDetails: ").append(toIndentedString(challanDetails)).append("\n");
    sb.append("    permitIssueDate: ").append(toIndentedString(permitIssueDate)).append("\n");
    sb.append("    permitNumber: ").append(toIndentedString(permitNumber)).append("\n");
    sb.append("    permitType: ").append(toIndentedString(permitType)).append("\n");
    sb.append("    permitValidFrom: ").append(toIndentedString(permitValidFrom)).append("\n");
    sb.append("    permitValidUpto: ").append(toIndentedString(permitValidUpto)).append("\n");
    sb.append("    nonUseStatus: ").append(toIndentedString(nonUseStatus)).append("\n");
    sb.append("    nonUseFrom: ").append(toIndentedString(nonUseFrom)).append("\n");
    sb.append("    nonUseTo: ").append(toIndentedString(nonUseTo)).append("\n");
    sb.append("    nationalPermitNumber: ").append(toIndentedString(nationalPermitNumber)).append("\n");
    sb.append("    nationalPermitUpto: ").append(toIndentedString(nationalPermitUpto)).append("\n");
    sb.append("    nationalPermitIssuedBy: ").append(toIndentedString(nationalPermitIssuedBy)).append("\n");
    sb.append("    isCommercial: ").append(toIndentedString(isCommercial)).append("\n");
    sb.append("    nocDetails: ").append(toIndentedString(nocDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("verification_id");
    openapiFields.add("reference_id");
    openapiFields.add("status");
    openapiFields.add("reg_no");
    openapiFields.add("class");
    openapiFields.add("chassis");
    openapiFields.add("engine");
    openapiFields.add("vehicle_manufacturer_name");
    openapiFields.add("model");
    openapiFields.add("vehicle_color");
    openapiFields.add("type");
    openapiFields.add("norms_type");
    openapiFields.add("body_type");
    openapiFields.add("owner_count");
    openapiFields.add("owner");
    openapiFields.add("owner_father_name");
    openapiFields.add("mobile_number");
    openapiFields.add("rc_status");
    openapiFields.add("status_as_on");
    openapiFields.add("reg_authority");
    openapiFields.add("reg_date");
    openapiFields.add("vehicle_manufacturing_month_year");
    openapiFields.add("rc_expiry_date");
    openapiFields.add("vehicle_tax_upto");
    openapiFields.add("vehicle_insurance_company_name");
    openapiFields.add("vehicle_insurance_upto");
    openapiFields.add("vehicle_insurance_policy_number");
    openapiFields.add("rc_financer");
    openapiFields.add("present_address");
    openapiFields.add("split_present_address");
    openapiFields.add("permanent_address");
    openapiFields.add("split_permanent_address");
    openapiFields.add("vehicle_cubic_capacity");
    openapiFields.add("gross_vehicle_weight");
    openapiFields.add("unladen_weight");
    openapiFields.add("vehicle_category");
    openapiFields.add("rc_standard_cap");
    openapiFields.add("vehicle_cylinders_no");
    openapiFields.add("vehicle_seat_capacity");
    openapiFields.add("vehicle_sleeper_capacity");
    openapiFields.add("vehicle_standing_capacity");
    openapiFields.add("wheelbase");
    openapiFields.add("vehicle_number");
    openapiFields.add("pucc_number");
    openapiFields.add("pucc_upto");
    openapiFields.add("blacklist_status");
    openapiFields.add("blacklist_details");
    openapiFields.add("challan_details");
    openapiFields.add("permit_issue_date");
    openapiFields.add("permit_number");
    openapiFields.add("permit_type");
    openapiFields.add("permit_valid_from");
    openapiFields.add("permit_valid_upto");
    openapiFields.add("non_use_status");
    openapiFields.add("non_use_from");
    openapiFields.add("non_use_to");
    openapiFields.add("national_permit_number");
    openapiFields.add("national_permit_upto");
    openapiFields.add("national_permit_issued_by");
    openapiFields.add("is_commercial");
    openapiFields.add("noc_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VehicleRcResponseSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("verification_id") != null && !jsonObj.get("verification_id").isJsonNull()) && !jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("reg_no") != null && !jsonObj.get("reg_no").isJsonNull()) && !jsonObj.get("reg_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reg_no").toString()));
      }
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if ((jsonObj.get("chassis") != null && !jsonObj.get("chassis").isJsonNull()) && !jsonObj.get("chassis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chassis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chassis").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      if ((jsonObj.get("vehicle_manufacturer_name") != null && !jsonObj.get("vehicle_manufacturer_name").isJsonNull()) && !jsonObj.get("vehicle_manufacturer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_manufacturer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_manufacturer_name").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("vehicle_color") != null && !jsonObj.get("vehicle_color").isJsonNull()) && !jsonObj.get("vehicle_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_color").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("norms_type") != null && !jsonObj.get("norms_type").isJsonNull()) && !jsonObj.get("norms_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `norms_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("norms_type").toString()));
      }
      if ((jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) && !jsonObj.get("body_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
      }
      if ((jsonObj.get("owner_count") != null && !jsonObj.get("owner_count").isJsonNull()) && !jsonObj.get("owner_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_count").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("owner_father_name") != null && !jsonObj.get("owner_father_name").isJsonNull()) && !jsonObj.get("owner_father_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_father_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_father_name").toString()));
      }
      if ((jsonObj.get("mobile_number") != null && !jsonObj.get("mobile_number").isJsonNull()) && !jsonObj.get("mobile_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_number").toString()));
      }
      if ((jsonObj.get("rc_status") != null && !jsonObj.get("rc_status").isJsonNull()) && !jsonObj.get("rc_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rc_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rc_status").toString()));
      }
      if ((jsonObj.get("status_as_on") != null && !jsonObj.get("status_as_on").isJsonNull()) && !jsonObj.get("status_as_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_as_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_as_on").toString()));
      }
      if ((jsonObj.get("reg_authority") != null && !jsonObj.get("reg_authority").isJsonNull()) && !jsonObj.get("reg_authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reg_authority").toString()));
      }
      if ((jsonObj.get("reg_date") != null && !jsonObj.get("reg_date").isJsonNull()) && !jsonObj.get("reg_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reg_date").toString()));
      }
      if ((jsonObj.get("vehicle_manufacturing_month_year") != null && !jsonObj.get("vehicle_manufacturing_month_year").isJsonNull()) && !jsonObj.get("vehicle_manufacturing_month_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_manufacturing_month_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_manufacturing_month_year").toString()));
      }
      if ((jsonObj.get("rc_expiry_date") != null && !jsonObj.get("rc_expiry_date").isJsonNull()) && !jsonObj.get("rc_expiry_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rc_expiry_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rc_expiry_date").toString()));
      }
      if ((jsonObj.get("vehicle_tax_upto") != null && !jsonObj.get("vehicle_tax_upto").isJsonNull()) && !jsonObj.get("vehicle_tax_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_tax_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_tax_upto").toString()));
      }
      if ((jsonObj.get("vehicle_insurance_company_name") != null && !jsonObj.get("vehicle_insurance_company_name").isJsonNull()) && !jsonObj.get("vehicle_insurance_company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_insurance_company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_insurance_company_name").toString()));
      }
      if ((jsonObj.get("vehicle_insurance_upto") != null && !jsonObj.get("vehicle_insurance_upto").isJsonNull()) && !jsonObj.get("vehicle_insurance_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_insurance_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_insurance_upto").toString()));
      }
      if ((jsonObj.get("vehicle_insurance_policy_number") != null && !jsonObj.get("vehicle_insurance_policy_number").isJsonNull()) && !jsonObj.get("vehicle_insurance_policy_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_insurance_policy_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_insurance_policy_number").toString()));
      }
      if ((jsonObj.get("rc_financer") != null && !jsonObj.get("rc_financer").isJsonNull()) && !jsonObj.get("rc_financer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rc_financer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rc_financer").toString()));
      }
      if ((jsonObj.get("present_address") != null && !jsonObj.get("present_address").isJsonNull()) && !jsonObj.get("present_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `present_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("present_address").toString()));
      }
      // validate the optional field `split_present_address`
      if (jsonObj.get("split_present_address") != null && !jsonObj.get("split_present_address").isJsonNull()) {
        SplitAddress.validateJsonElement(jsonObj.get("split_present_address"));
      }
      if ((jsonObj.get("permanent_address") != null && !jsonObj.get("permanent_address").isJsonNull()) && !jsonObj.get("permanent_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permanent_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permanent_address").toString()));
      }
      // validate the optional field `split_permanent_address`
      if (jsonObj.get("split_permanent_address") != null && !jsonObj.get("split_permanent_address").isJsonNull()) {
        SplitAddress.validateJsonElement(jsonObj.get("split_permanent_address"));
      }
      if ((jsonObj.get("vehicle_cubic_capacity") != null && !jsonObj.get("vehicle_cubic_capacity").isJsonNull()) && !jsonObj.get("vehicle_cubic_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_cubic_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_cubic_capacity").toString()));
      }
      if ((jsonObj.get("gross_vehicle_weight") != null && !jsonObj.get("gross_vehicle_weight").isJsonNull()) && !jsonObj.get("gross_vehicle_weight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gross_vehicle_weight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gross_vehicle_weight").toString()));
      }
      if ((jsonObj.get("unladen_weight") != null && !jsonObj.get("unladen_weight").isJsonNull()) && !jsonObj.get("unladen_weight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unladen_weight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unladen_weight").toString()));
      }
      if ((jsonObj.get("vehicle_category") != null && !jsonObj.get("vehicle_category").isJsonNull()) && !jsonObj.get("vehicle_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_category").toString()));
      }
      if ((jsonObj.get("rc_standard_cap") != null && !jsonObj.get("rc_standard_cap").isJsonNull()) && !jsonObj.get("rc_standard_cap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rc_standard_cap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rc_standard_cap").toString()));
      }
      if ((jsonObj.get("vehicle_cylinders_no") != null && !jsonObj.get("vehicle_cylinders_no").isJsonNull()) && !jsonObj.get("vehicle_cylinders_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_cylinders_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_cylinders_no").toString()));
      }
      if ((jsonObj.get("vehicle_seat_capacity") != null && !jsonObj.get("vehicle_seat_capacity").isJsonNull()) && !jsonObj.get("vehicle_seat_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_seat_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_seat_capacity").toString()));
      }
      if ((jsonObj.get("vehicle_sleeper_capacity") != null && !jsonObj.get("vehicle_sleeper_capacity").isJsonNull()) && !jsonObj.get("vehicle_sleeper_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_sleeper_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_sleeper_capacity").toString()));
      }
      if ((jsonObj.get("vehicle_standing_capacity") != null && !jsonObj.get("vehicle_standing_capacity").isJsonNull()) && !jsonObj.get("vehicle_standing_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_standing_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_standing_capacity").toString()));
      }
      if ((jsonObj.get("wheelbase") != null && !jsonObj.get("wheelbase").isJsonNull()) && !jsonObj.get("wheelbase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wheelbase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wheelbase").toString()));
      }
      if ((jsonObj.get("vehicle_number") != null && !jsonObj.get("vehicle_number").isJsonNull()) && !jsonObj.get("vehicle_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_number").toString()));
      }
      if ((jsonObj.get("pucc_number") != null && !jsonObj.get("pucc_number").isJsonNull()) && !jsonObj.get("pucc_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pucc_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pucc_number").toString()));
      }
      if ((jsonObj.get("pucc_upto") != null && !jsonObj.get("pucc_upto").isJsonNull()) && !jsonObj.get("pucc_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pucc_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pucc_upto").toString()));
      }
      if ((jsonObj.get("blacklist_status") != null && !jsonObj.get("blacklist_status").isJsonNull()) && !jsonObj.get("blacklist_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blacklist_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blacklist_status").toString()));
      }
      if ((jsonObj.get("permit_issue_date") != null && !jsonObj.get("permit_issue_date").isJsonNull()) && !jsonObj.get("permit_issue_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_issue_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_issue_date").toString()));
      }
      if ((jsonObj.get("permit_number") != null && !jsonObj.get("permit_number").isJsonNull()) && !jsonObj.get("permit_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_number").toString()));
      }
      if ((jsonObj.get("permit_type") != null && !jsonObj.get("permit_type").isJsonNull()) && !jsonObj.get("permit_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_type").toString()));
      }
      if ((jsonObj.get("permit_valid_from") != null && !jsonObj.get("permit_valid_from").isJsonNull()) && !jsonObj.get("permit_valid_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_valid_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_valid_from").toString()));
      }
      if ((jsonObj.get("permit_valid_upto") != null && !jsonObj.get("permit_valid_upto").isJsonNull()) && !jsonObj.get("permit_valid_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_valid_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_valid_upto").toString()));
      }
      if ((jsonObj.get("non_use_status") != null && !jsonObj.get("non_use_status").isJsonNull()) && !jsonObj.get("non_use_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_use_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_use_status").toString()));
      }
      if ((jsonObj.get("non_use_from") != null && !jsonObj.get("non_use_from").isJsonNull()) && !jsonObj.get("non_use_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_use_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_use_from").toString()));
      }
      if ((jsonObj.get("non_use_to") != null && !jsonObj.get("non_use_to").isJsonNull()) && !jsonObj.get("non_use_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_use_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_use_to").toString()));
      }
      if ((jsonObj.get("national_permit_number") != null && !jsonObj.get("national_permit_number").isJsonNull()) && !jsonObj.get("national_permit_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_permit_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_permit_number").toString()));
      }
      if ((jsonObj.get("national_permit_upto") != null && !jsonObj.get("national_permit_upto").isJsonNull()) && !jsonObj.get("national_permit_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_permit_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_permit_upto").toString()));
      }
      if ((jsonObj.get("national_permit_issued_by") != null && !jsonObj.get("national_permit_issued_by").isJsonNull()) && !jsonObj.get("national_permit_issued_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_permit_issued_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_permit_issued_by").toString()));
      }
      if ((jsonObj.get("noc_details") != null && !jsonObj.get("noc_details").isJsonNull()) && !jsonObj.get("noc_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noc_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noc_details").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VehicleRcResponseSchema
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("verification_id") != null && !jsonObj.get("verification_id").isJsonNull()) && !jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("reg_no") != null && !jsonObj.get("reg_no").isJsonNull()) && !jsonObj.get("reg_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reg_no").toString()));
      }
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      if ((jsonObj.get("chassis") != null && !jsonObj.get("chassis").isJsonNull()) && !jsonObj.get("chassis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chassis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chassis").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      if ((jsonObj.get("vehicle_manufacturer_name") != null && !jsonObj.get("vehicle_manufacturer_name").isJsonNull()) && !jsonObj.get("vehicle_manufacturer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_manufacturer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_manufacturer_name").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("vehicle_color") != null && !jsonObj.get("vehicle_color").isJsonNull()) && !jsonObj.get("vehicle_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_color").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("norms_type") != null && !jsonObj.get("norms_type").isJsonNull()) && !jsonObj.get("norms_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `norms_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("norms_type").toString()));
      }
      if ((jsonObj.get("body_type") != null && !jsonObj.get("body_type").isJsonNull()) && !jsonObj.get("body_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_type").toString()));
      }
      if ((jsonObj.get("owner_count") != null && !jsonObj.get("owner_count").isJsonNull()) && !jsonObj.get("owner_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_count").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("owner_father_name") != null && !jsonObj.get("owner_father_name").isJsonNull()) && !jsonObj.get("owner_father_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_father_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_father_name").toString()));
      }
      if ((jsonObj.get("mobile_number") != null && !jsonObj.get("mobile_number").isJsonNull()) && !jsonObj.get("mobile_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_number").toString()));
      }
      if ((jsonObj.get("rc_status") != null && !jsonObj.get("rc_status").isJsonNull()) && !jsonObj.get("rc_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rc_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rc_status").toString()));
      }
      if ((jsonObj.get("status_as_on") != null && !jsonObj.get("status_as_on").isJsonNull()) && !jsonObj.get("status_as_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_as_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_as_on").toString()));
      }
      if ((jsonObj.get("reg_authority") != null && !jsonObj.get("reg_authority").isJsonNull()) && !jsonObj.get("reg_authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reg_authority").toString()));
      }
      if ((jsonObj.get("reg_date") != null && !jsonObj.get("reg_date").isJsonNull()) && !jsonObj.get("reg_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reg_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reg_date").toString()));
      }
      if ((jsonObj.get("vehicle_manufacturing_month_year") != null && !jsonObj.get("vehicle_manufacturing_month_year").isJsonNull()) && !jsonObj.get("vehicle_manufacturing_month_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_manufacturing_month_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_manufacturing_month_year").toString()));
      }
      if ((jsonObj.get("rc_expiry_date") != null && !jsonObj.get("rc_expiry_date").isJsonNull()) && !jsonObj.get("rc_expiry_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rc_expiry_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rc_expiry_date").toString()));
      }
      if ((jsonObj.get("vehicle_tax_upto") != null && !jsonObj.get("vehicle_tax_upto").isJsonNull()) && !jsonObj.get("vehicle_tax_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_tax_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_tax_upto").toString()));
      }
      if ((jsonObj.get("vehicle_insurance_company_name") != null && !jsonObj.get("vehicle_insurance_company_name").isJsonNull()) && !jsonObj.get("vehicle_insurance_company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_insurance_company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_insurance_company_name").toString()));
      }
      if ((jsonObj.get("vehicle_insurance_upto") != null && !jsonObj.get("vehicle_insurance_upto").isJsonNull()) && !jsonObj.get("vehicle_insurance_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_insurance_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_insurance_upto").toString()));
      }
      if ((jsonObj.get("vehicle_insurance_policy_number") != null && !jsonObj.get("vehicle_insurance_policy_number").isJsonNull()) && !jsonObj.get("vehicle_insurance_policy_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_insurance_policy_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_insurance_policy_number").toString()));
      }
      if ((jsonObj.get("rc_financer") != null && !jsonObj.get("rc_financer").isJsonNull()) && !jsonObj.get("rc_financer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rc_financer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rc_financer").toString()));
      }
      if ((jsonObj.get("present_address") != null && !jsonObj.get("present_address").isJsonNull()) && !jsonObj.get("present_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `present_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("present_address").toString()));
      }
      // validate the optional field `split_present_address`
      if (jsonObj.get("split_present_address") != null && !jsonObj.get("split_present_address").isJsonNull()) {
        SplitAddress.validateJsonElement(jsonObj.get("split_present_address"));
        return true;
      }
      if ((jsonObj.get("permanent_address") != null && !jsonObj.get("permanent_address").isJsonNull()) && !jsonObj.get("permanent_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permanent_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permanent_address").toString()));
      }
      // validate the optional field `split_permanent_address`
      if (jsonObj.get("split_permanent_address") != null && !jsonObj.get("split_permanent_address").isJsonNull()) {
        SplitAddress.validateJsonElement(jsonObj.get("split_permanent_address"));
        return true;
      }
      if ((jsonObj.get("vehicle_cubic_capacity") != null && !jsonObj.get("vehicle_cubic_capacity").isJsonNull()) && !jsonObj.get("vehicle_cubic_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_cubic_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_cubic_capacity").toString()));
      }
      if ((jsonObj.get("gross_vehicle_weight") != null && !jsonObj.get("gross_vehicle_weight").isJsonNull()) && !jsonObj.get("gross_vehicle_weight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gross_vehicle_weight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gross_vehicle_weight").toString()));
      }
      if ((jsonObj.get("unladen_weight") != null && !jsonObj.get("unladen_weight").isJsonNull()) && !jsonObj.get("unladen_weight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unladen_weight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unladen_weight").toString()));
      }
      if ((jsonObj.get("vehicle_category") != null && !jsonObj.get("vehicle_category").isJsonNull()) && !jsonObj.get("vehicle_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_category").toString()));
      }
      if ((jsonObj.get("rc_standard_cap") != null && !jsonObj.get("rc_standard_cap").isJsonNull()) && !jsonObj.get("rc_standard_cap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rc_standard_cap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rc_standard_cap").toString()));
      }
      if ((jsonObj.get("vehicle_cylinders_no") != null && !jsonObj.get("vehicle_cylinders_no").isJsonNull()) && !jsonObj.get("vehicle_cylinders_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_cylinders_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_cylinders_no").toString()));
      }
      if ((jsonObj.get("vehicle_seat_capacity") != null && !jsonObj.get("vehicle_seat_capacity").isJsonNull()) && !jsonObj.get("vehicle_seat_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_seat_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_seat_capacity").toString()));
      }
      if ((jsonObj.get("vehicle_sleeper_capacity") != null && !jsonObj.get("vehicle_sleeper_capacity").isJsonNull()) && !jsonObj.get("vehicle_sleeper_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_sleeper_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_sleeper_capacity").toString()));
      }
      if ((jsonObj.get("vehicle_standing_capacity") != null && !jsonObj.get("vehicle_standing_capacity").isJsonNull()) && !jsonObj.get("vehicle_standing_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_standing_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_standing_capacity").toString()));
      }
      if ((jsonObj.get("wheelbase") != null && !jsonObj.get("wheelbase").isJsonNull()) && !jsonObj.get("wheelbase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wheelbase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wheelbase").toString()));
      }
      if ((jsonObj.get("vehicle_number") != null && !jsonObj.get("vehicle_number").isJsonNull()) && !jsonObj.get("vehicle_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicle_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicle_number").toString()));
      }
      if ((jsonObj.get("pucc_number") != null && !jsonObj.get("pucc_number").isJsonNull()) && !jsonObj.get("pucc_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pucc_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pucc_number").toString()));
      }
      if ((jsonObj.get("pucc_upto") != null && !jsonObj.get("pucc_upto").isJsonNull()) && !jsonObj.get("pucc_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pucc_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pucc_upto").toString()));
      }
      if ((jsonObj.get("blacklist_status") != null && !jsonObj.get("blacklist_status").isJsonNull()) && !jsonObj.get("blacklist_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blacklist_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blacklist_status").toString()));
      }
      if ((jsonObj.get("permit_issue_date") != null && !jsonObj.get("permit_issue_date").isJsonNull()) && !jsonObj.get("permit_issue_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_issue_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_issue_date").toString()));
      }
      if ((jsonObj.get("permit_number") != null && !jsonObj.get("permit_number").isJsonNull()) && !jsonObj.get("permit_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_number").toString()));
      }
      if ((jsonObj.get("permit_type") != null && !jsonObj.get("permit_type").isJsonNull()) && !jsonObj.get("permit_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_type").toString()));
      }
      if ((jsonObj.get("permit_valid_from") != null && !jsonObj.get("permit_valid_from").isJsonNull()) && !jsonObj.get("permit_valid_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_valid_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_valid_from").toString()));
      }
      if ((jsonObj.get("permit_valid_upto") != null && !jsonObj.get("permit_valid_upto").isJsonNull()) && !jsonObj.get("permit_valid_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permit_valid_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permit_valid_upto").toString()));
      }
      if ((jsonObj.get("non_use_status") != null && !jsonObj.get("non_use_status").isJsonNull()) && !jsonObj.get("non_use_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_use_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_use_status").toString()));
      }
      if ((jsonObj.get("non_use_from") != null && !jsonObj.get("non_use_from").isJsonNull()) && !jsonObj.get("non_use_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_use_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_use_from").toString()));
      }
      if ((jsonObj.get("non_use_to") != null && !jsonObj.get("non_use_to").isJsonNull()) && !jsonObj.get("non_use_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_use_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_use_to").toString()));
      }
      if ((jsonObj.get("national_permit_number") != null && !jsonObj.get("national_permit_number").isJsonNull()) && !jsonObj.get("national_permit_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_permit_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_permit_number").toString()));
      }
      if ((jsonObj.get("national_permit_upto") != null && !jsonObj.get("national_permit_upto").isJsonNull()) && !jsonObj.get("national_permit_upto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_permit_upto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_permit_upto").toString()));
      }
      if ((jsonObj.get("national_permit_issued_by") != null && !jsonObj.get("national_permit_issued_by").isJsonNull()) && !jsonObj.get("national_permit_issued_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_permit_issued_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_permit_issued_by").toString()));
      }
      if ((jsonObj.get("noc_details") != null && !jsonObj.get("noc_details").isJsonNull()) && !jsonObj.get("noc_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noc_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noc_details").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VehicleRcResponseSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VehicleRcResponseSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VehicleRcResponseSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VehicleRcResponseSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<VehicleRcResponseSchema>() {
           @Override
           public void write(JsonWriter out, VehicleRcResponseSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VehicleRcResponseSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VehicleRcResponseSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VehicleRcResponseSchema
  * @throws IOException if the JSON string is invalid with respect to VehicleRcResponseSchema
  */
  public static VehicleRcResponseSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VehicleRcResponseSchema.class);
  }

 /**
  * Convert an instance of VehicleRcResponseSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

