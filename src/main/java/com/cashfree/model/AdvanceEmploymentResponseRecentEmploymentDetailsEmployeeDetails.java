/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.cashfree.model.AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * It contains the details of the individual as an employee.
 */
@Schema(description = "It contains the details of the individual as an employee.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-08T05:03:36.102379Z[Etc/UTC]")
public class AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails {
  public static final String SERIALIZED_NAME_MEMBER_ID = "member_id";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private String memberId;

  public static final String SERIALIZED_NAME_EXIT_DATE = "exit_date";
  @SerializedName(SERIALIZED_NAME_EXIT_DATE)
  private String exitDate;

  public static final String SERIALIZED_NAME_JOINING_DATE = "joining_date";
  @SerializedName(SERIALIZED_NAME_JOINING_DATE)
  private String joiningDate;

  public static final String SERIALIZED_NAME_UAN = "uan";
  @SerializedName(SERIALIZED_NAME_UAN)
  private String uan;

  public static final String SERIALIZED_NAME_EPFO = "epfo";
  @SerializedName(SERIALIZED_NAME_EPFO)
  private AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo epfo;

  public static final String SERIALIZED_NAME_EMPLOYED = "employed";
  @SerializedName(SERIALIZED_NAME_EMPLOYED)
  private Boolean employed;

  public static final String SERIALIZED_NAME_EMPLOYEE_NAME_MATCH = "employee_name_match";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NAME_MATCH)
  private Boolean employeeNameMatch;

  public static final String SERIALIZED_NAME_EXIT_DATE_MARKED = "exit_date_marked";
  @SerializedName(SERIALIZED_NAME_EXIT_DATE_MARKED)
  private Boolean exitDateMarked;

  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails() {
  }

  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails memberId(String memberId) {
    
    this.memberId = memberId;
    return this;
  }

   /**
   * It displays the unique ID assigned to an individual.
   * @return memberId
  **/
  @javax.annotation.Nullable
  @Schema(example = "UPLKO22417520000010171", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the unique ID assigned to an individual.")
  public String getMemberId() {
    return memberId;
  }


  public void setMemberId(String memberId) {
    this.memberId = memberId;
  }


  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails exitDate(String exitDate) {
    
    this.exitDate = exitDate;
    return this;
  }

   /**
   * It displays the last working day of the employee in the organisation.
   * @return exitDate
  **/
  @javax.annotation.Nullable
  @Schema(example = "2024-11-01", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the last working day of the employee in the organisation.")
  public String getExitDate() {
    return exitDate;
  }


  public void setExitDate(String exitDate) {
    this.exitDate = exitDate;
  }


  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails joiningDate(String joiningDate) {
    
    this.joiningDate = joiningDate;
    return this;
  }

   /**
   * It displays the first working day of the employee in the organisation.
   * @return joiningDate
  **/
  @javax.annotation.Nullable
  @Schema(example = "2023-09-01", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the first working day of the employee in the organisation.")
  public String getJoiningDate() {
    return joiningDate;
  }


  public void setJoiningDate(String joiningDate) {
    this.joiningDate = joiningDate;
  }


  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails uan(String uan) {
    
    this.uan = uan;
    return this;
  }

   /**
   * It displays the Universal Account Number (UAN) information of the employee.
   * @return uan
  **/
  @javax.annotation.Nullable
  @Schema(example = "101379636551", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the Universal Account Number (UAN) information of the employee.")
  public String getUan() {
    return uan;
  }


  public void setUan(String uan) {
    this.uan = uan;
  }


  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails epfo(AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo epfo) {
    
    this.epfo = epfo;
    return this;
  }

   /**
   * Get epfo
   * @return epfo
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo getEpfo() {
    return epfo;
  }


  public void setEpfo(AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo epfo) {
    this.epfo = epfo;
  }


  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails employed(Boolean employed) {
    
    this.employed = employed;
    return this;
  }

   /**
   * It displays whether the individual is employed.
   * @return employed
  **/
  @javax.annotation.Nullable
  @Schema(example = "false", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays whether the individual is employed.")
  public Boolean getEmployed() {
    return employed;
  }


  public void setEmployed(Boolean employed) {
    this.employed = employed;
  }


  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails employeeNameMatch(Boolean employeeNameMatch) {
    
    this.employeeNameMatch = employeeNameMatch;
    return this;
  }

   /**
   * It displays whether the individual&#39;s name matches with the name found in EPFO.
   * @return employeeNameMatch
  **/
  @javax.annotation.Nullable
  @Schema(example = "false", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays whether the individual's name matches with the name found in EPFO.")
  public Boolean getEmployeeNameMatch() {
    return employeeNameMatch;
  }


  public void setEmployeeNameMatch(Boolean employeeNameMatch) {
    this.employeeNameMatch = employeeNameMatch;
  }


  public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails exitDateMarked(Boolean exitDateMarked) {
    
    this.exitDateMarked = exitDateMarked;
    return this;
  }

   /**
   * It displays whether the last working  
   * @return exitDateMarked
  **/
  @javax.annotation.Nullable
  @Schema(example = "false", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays whether the last working  ")
  public Boolean getExitDateMarked() {
    return exitDateMarked;
  }


  public void setExitDateMarked(Boolean exitDateMarked) {
    this.exitDateMarked = exitDateMarked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails = (AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails) o;
    return Objects.equals(this.memberId, advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.memberId) &&
        Objects.equals(this.exitDate, advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.exitDate) &&
        Objects.equals(this.joiningDate, advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.joiningDate) &&
        Objects.equals(this.uan, advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.uan) &&
        Objects.equals(this.epfo, advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.epfo) &&
        Objects.equals(this.employed, advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.employed) &&
        Objects.equals(this.employeeNameMatch, advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.employeeNameMatch) &&
        Objects.equals(this.exitDateMarked, advanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.exitDateMarked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberId, exitDate, joiningDate, uan, epfo, employed, employeeNameMatch, exitDateMarked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails {\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    exitDate: ").append(toIndentedString(exitDate)).append("\n");
    sb.append("    joiningDate: ").append(toIndentedString(joiningDate)).append("\n");
    sb.append("    uan: ").append(toIndentedString(uan)).append("\n");
    sb.append("    epfo: ").append(toIndentedString(epfo)).append("\n");
    sb.append("    employed: ").append(toIndentedString(employed)).append("\n");
    sb.append("    employeeNameMatch: ").append(toIndentedString(employeeNameMatch)).append("\n");
    sb.append("    exitDateMarked: ").append(toIndentedString(exitDateMarked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("member_id");
    openapiFields.add("exit_date");
    openapiFields.add("joining_date");
    openapiFields.add("uan");
    openapiFields.add("epfo");
    openapiFields.add("employed");
    openapiFields.add("employee_name_match");
    openapiFields.add("exit_date_marked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("member_id") != null && !jsonObj.get("member_id").isJsonNull()) && !jsonObj.get("member_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member_id").toString()));
      }
      if ((jsonObj.get("exit_date") != null && !jsonObj.get("exit_date").isJsonNull()) && !jsonObj.get("exit_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exit_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exit_date").toString()));
      }
      if ((jsonObj.get("joining_date") != null && !jsonObj.get("joining_date").isJsonNull()) && !jsonObj.get("joining_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joining_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joining_date").toString()));
      }
      if ((jsonObj.get("uan") != null && !jsonObj.get("uan").isJsonNull()) && !jsonObj.get("uan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uan").toString()));
      }
      // validate the optional field `epfo`
      if (jsonObj.get("epfo") != null && !jsonObj.get("epfo").isJsonNull()) {
        AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo.validateJsonElement(jsonObj.get("epfo"));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("member_id") != null && !jsonObj.get("member_id").isJsonNull()) && !jsonObj.get("member_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member_id").toString()));
      }
      if ((jsonObj.get("exit_date") != null && !jsonObj.get("exit_date").isJsonNull()) && !jsonObj.get("exit_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exit_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exit_date").toString()));
      }
      if ((jsonObj.get("joining_date") != null && !jsonObj.get("joining_date").isJsonNull()) && !jsonObj.get("joining_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joining_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joining_date").toString()));
      }
      if ((jsonObj.get("uan") != null && !jsonObj.get("uan").isJsonNull()) && !jsonObj.get("uan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uan").toString()));
      }
      // validate the optional field `epfo`
      if (jsonObj.get("epfo") != null && !jsonObj.get("epfo").isJsonNull()) {
        AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetailsEpfo.validateJsonElement(jsonObj.get("epfo"));
        return true;
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails>() {
           @Override
           public void write(JsonWriter out, AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
  * @throws IOException if the JSON string is invalid with respect to AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
  */
  public static AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.class);
  }

 /**
  * Convert an instance of AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

