/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * It displays the basic information of the employee.
 */
@Schema(description = "It displays the basic information of the employee.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-18T11:12:20.695812Z[Etc/UTC]")
public class AdvanceEmploymentResponseUanDetailsInnerBasicDetails {
  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private String dob;

  public static final String SERIALIZED_NAME_EMPLOYEE_CONFIDENCE_SCORE = "employee_confidence_score";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_CONFIDENCE_SCORE)
  private BigDecimal employeeConfidenceScore;

  public static final String SERIALIZED_NAME_EMPLOYEE_NAME = "employee_name";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NAME)
  private String employeeName;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_AADHAAR_VERIFIED = "aadhaar_verified";
  @SerializedName(SERIALIZED_NAME_AADHAAR_VERIFIED)
  private Boolean aadhaarVerified;

  public AdvanceEmploymentResponseUanDetailsInnerBasicDetails() {
  }

  public AdvanceEmploymentResponseUanDetailsInnerBasicDetails gender(String gender) {
    
    this.gender = gender;
    return this;
  }

   /**
   * It displays the gender of the employee.
   * @return gender
  **/
  @javax.annotation.Nullable
  @Schema(example = "MALE", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the gender of the employee.")
  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    this.gender = gender;
  }


  public AdvanceEmploymentResponseUanDetailsInnerBasicDetails dob(String dob) {
    
    this.dob = dob;
    return this;
  }

   /**
   * It displays the date of birth of the employee.
   * @return dob
  **/
  @javax.annotation.Nullable
  @Schema(example = "1996-10-02", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the date of birth of the employee.")
  public String getDob() {
    return dob;
  }


  public void setDob(String dob) {
    this.dob = dob;
  }


  public AdvanceEmploymentResponseUanDetailsInnerBasicDetails employeeConfidenceScore(BigDecimal employeeConfidenceScore) {
    
    this.employeeConfidenceScore = employeeConfidenceScore;
    return this;
  }

   /**
   * It displays the confidence score for the employee.
   * @return employeeConfidenceScore
  **/
  @javax.annotation.Nullable
  @Schema(example = "0", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the confidence score for the employee.")
  public BigDecimal getEmployeeConfidenceScore() {
    return employeeConfidenceScore;
  }


  public void setEmployeeConfidenceScore(BigDecimal employeeConfidenceScore) {
    this.employeeConfidenceScore = employeeConfidenceScore;
  }


  public AdvanceEmploymentResponseUanDetailsInnerBasicDetails employeeName(String employeeName) {
    
    this.employeeName = employeeName;
    return this;
  }

   /**
   * It displays the name of the employee.
   * @return employeeName
  **/
  @javax.annotation.Nullable
  @Schema(example = "John Doe", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name of the employee.")
  public String getEmployeeName() {
    return employeeName;
  }


  public void setEmployeeName(String employeeName) {
    this.employeeName = employeeName;
  }


  public AdvanceEmploymentResponseUanDetailsInnerBasicDetails phone(String phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * It displays the phone number of the employee.
   * @return phone
  **/
  @javax.annotation.Nullable
  @Schema(example = "9988776655", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the phone number of the employee.")
  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    this.phone = phone;
  }


  public AdvanceEmploymentResponseUanDetailsInnerBasicDetails aadhaarVerified(Boolean aadhaarVerified) {
    
    this.aadhaarVerified = aadhaarVerified;
    return this;
  }

   /**
   * It displays where the aadhaar information of the employee is verified.
   * @return aadhaarVerified
  **/
  @javax.annotation.Nullable
  @Schema(example = "true", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays where the aadhaar information of the employee is verified.")
  public Boolean getAadhaarVerified() {
    return aadhaarVerified;
  }


  public void setAadhaarVerified(Boolean aadhaarVerified) {
    this.aadhaarVerified = aadhaarVerified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvanceEmploymentResponseUanDetailsInnerBasicDetails advanceEmploymentResponseUanDetailsInnerBasicDetails = (AdvanceEmploymentResponseUanDetailsInnerBasicDetails) o;
    return Objects.equals(this.gender, advanceEmploymentResponseUanDetailsInnerBasicDetails.gender) &&
        Objects.equals(this.dob, advanceEmploymentResponseUanDetailsInnerBasicDetails.dob) &&
        Objects.equals(this.employeeConfidenceScore, advanceEmploymentResponseUanDetailsInnerBasicDetails.employeeConfidenceScore) &&
        Objects.equals(this.employeeName, advanceEmploymentResponseUanDetailsInnerBasicDetails.employeeName) &&
        Objects.equals(this.phone, advanceEmploymentResponseUanDetailsInnerBasicDetails.phone) &&
        Objects.equals(this.aadhaarVerified, advanceEmploymentResponseUanDetailsInnerBasicDetails.aadhaarVerified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gender, dob, employeeConfidenceScore, employeeName, phone, aadhaarVerified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvanceEmploymentResponseUanDetailsInnerBasicDetails {\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    employeeConfidenceScore: ").append(toIndentedString(employeeConfidenceScore)).append("\n");
    sb.append("    employeeName: ").append(toIndentedString(employeeName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    aadhaarVerified: ").append(toIndentedString(aadhaarVerified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gender");
    openapiFields.add("dob");
    openapiFields.add("employee_confidence_score");
    openapiFields.add("employee_name");
    openapiFields.add("phone");
    openapiFields.add("aadhaar_verified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AdvanceEmploymentResponseUanDetailsInnerBasicDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if ((jsonObj.get("employee_name") != null && !jsonObj.get("employee_name").isJsonNull()) && !jsonObj.get("employee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_name").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AdvanceEmploymentResponseUanDetailsInnerBasicDetails
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if ((jsonObj.get("employee_name") != null && !jsonObj.get("employee_name").isJsonNull()) && !jsonObj.get("employee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_name").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvanceEmploymentResponseUanDetailsInnerBasicDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvanceEmploymentResponseUanDetailsInnerBasicDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvanceEmploymentResponseUanDetailsInnerBasicDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvanceEmploymentResponseUanDetailsInnerBasicDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvanceEmploymentResponseUanDetailsInnerBasicDetails>() {
           @Override
           public void write(JsonWriter out, AdvanceEmploymentResponseUanDetailsInnerBasicDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvanceEmploymentResponseUanDetailsInnerBasicDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdvanceEmploymentResponseUanDetailsInnerBasicDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdvanceEmploymentResponseUanDetailsInnerBasicDetails
  * @throws IOException if the JSON string is invalid with respect to AdvanceEmploymentResponseUanDetailsInnerBasicDetails
  */
  public static AdvanceEmploymentResponseUanDetailsInnerBasicDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvanceEmploymentResponseUanDetailsInnerBasicDetails.class);
  }

 /**
  * Convert an instance of AdvanceEmploymentResponseUanDetailsInnerBasicDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

