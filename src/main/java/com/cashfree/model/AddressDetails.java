/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.cashfree.model.AddressDetailsSplitAddress;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * It contains the address information of the individual.
 */
@Schema(description = "It contains the address information of the individual.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-11T11:46:16.350886Z[Etc/UTC]")
public class AddressDetails {
  public static final String SERIALIZED_NAME_COMPLETE_ADDRESS = "complete_address";
  @SerializedName(SERIALIZED_NAME_COMPLETE_ADDRESS)
  private String completeAddress;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_SPLIT_ADDRESS = "split_address";
  @SerializedName(SERIALIZED_NAME_SPLIT_ADDRESS)
  private AddressDetailsSplitAddress splitAddress;

  public AddressDetails() {
  }

  public AddressDetails completeAddress(String completeAddress) {
    
    this.completeAddress = completeAddress;
    return this;
  }

   /**
   * It displays the complete address information of the individual.
   * @return completeAddress
  **/
  @javax.annotation.Nullable
  @Schema(example = "S-90 SunTower, GopiNagar, Banaglore, KA - 560109", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the complete address information of the individual.")
  public String getCompleteAddress() {
    return completeAddress;
  }


  public void setCompleteAddress(String completeAddress) {
    this.completeAddress = completeAddress;
  }


  public AddressDetails type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * It displays the type of the address information.
   * @return type
  **/
  @javax.annotation.Nullable
  @Schema(example = "Permanent/Temporary", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the type of the address information.")
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public AddressDetails splitAddress(AddressDetailsSplitAddress splitAddress) {
    
    this.splitAddress = splitAddress;
    return this;
  }

   /**
   * Get splitAddress
   * @return splitAddress
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public AddressDetailsSplitAddress getSplitAddress() {
    return splitAddress;
  }


  public void setSplitAddress(AddressDetailsSplitAddress splitAddress) {
    this.splitAddress = splitAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressDetails addressDetails = (AddressDetails) o;
    return Objects.equals(this.completeAddress, addressDetails.completeAddress) &&
        Objects.equals(this.type, addressDetails.type) &&
        Objects.equals(this.splitAddress, addressDetails.splitAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completeAddress, type, splitAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressDetails {\n");
    sb.append("    completeAddress: ").append(toIndentedString(completeAddress)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    splitAddress: ").append(toIndentedString(splitAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complete_address");
    openapiFields.add("type");
    openapiFields.add("split_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddressDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("complete_address") != null && !jsonObj.get("complete_address").isJsonNull()) && !jsonObj.get("complete_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complete_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complete_address").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `split_address`
      if (jsonObj.get("split_address") != null && !jsonObj.get("split_address").isJsonNull()) {
        AddressDetailsSplitAddress.validateJsonElement(jsonObj.get("split_address"));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddressDetails
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("complete_address") != null && !jsonObj.get("complete_address").isJsonNull()) && !jsonObj.get("complete_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complete_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complete_address").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `split_address`
      if (jsonObj.get("split_address") != null && !jsonObj.get("split_address").isJsonNull()) {
        AddressDetailsSplitAddress.validateJsonElement(jsonObj.get("split_address"));
        return true;
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressDetails>() {
           @Override
           public void write(JsonWriter out, AddressDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddressDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddressDetails
  * @throws IOException if the JSON string is invalid with respect to AddressDetails
  */
  public static AddressDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressDetails.class);
  }

 /**
  * Convert an instance of AddressDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

