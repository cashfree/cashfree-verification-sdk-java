/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree.model;

import java.util.Objects;
import com.cashfree.model.PanAdvanceResponseSchemaAddress;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cashfree.JSON;

/**
 * Success response for PAN Advance
 */
@Schema(description = "Success response for PAN Advance")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-21T07:15:37.235803Z[Etc/UTC]")
public class PanAdvanceResponseSchema {
  public static final String SERIALIZED_NAME_REFERENCE_ID = "reference_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private Integer referenceId;

  public static final String SERIALIZED_NAME_VERIFICATION_ID = "verification_id";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ID)
  private String verificationId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PAN = "pan";
  @SerializedName(SERIALIZED_NAME_PAN)
  private String pan;

  public static final String SERIALIZED_NAME_NAME_PROVIDED = "name_provided";
  @SerializedName(SERIALIZED_NAME_NAME_PROVIDED)
  private String nameProvided;

  public static final String SERIALIZED_NAME_REGISTERED_NAME = "registered_name";
  @SerializedName(SERIALIZED_NAME_REGISTERED_NAME)
  private String registeredName;

  public static final String SERIALIZED_NAME_NAME_PAN_CARD = "name_pan_card";
  @SerializedName(SERIALIZED_NAME_NAME_PAN_CARD)
  private String namePanCard;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "date_of_birth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_MASKED_AADHAAR_NUMBER = "masked_aadhaar_number";
  @SerializedName(SERIALIZED_NAME_MASKED_AADHAAR_NUMBER)
  private String maskedAadhaarNumber;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_MOBILE_NUMBER = "mobile_number";
  @SerializedName(SERIALIZED_NAME_MOBILE_NUMBER)
  private String mobileNumber;

  public static final String SERIALIZED_NAME_AADHAAR_LINKED = "aadhaar_linked";
  @SerializedName(SERIALIZED_NAME_AADHAAR_LINKED)
  private Boolean aadhaarLinked;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private PanAdvanceResponseSchemaAddress address;

  public PanAdvanceResponseSchema() {
  }

  public PanAdvanceResponseSchema referenceId(Integer referenceId) {
    
    this.referenceId = referenceId;
    return this;
  }

   /**
   * It displays the unique ID created by Cashfree Payments for reference purposes.
   * @return referenceId
  **/
  @javax.annotation.Nullable
  @Schema(example = "1358", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the unique ID created by Cashfree Payments for reference purposes.")
  public Integer getReferenceId() {
    return referenceId;
  }


  public void setReferenceId(Integer referenceId) {
    this.referenceId = referenceId;
  }


  public PanAdvanceResponseSchema verificationId(String verificationId) {
    
    this.verificationId = verificationId;
    return this;
  }

   /**
   * It displays the unique ID you created to identify the verification request.
   * @return verificationId
  **/
  @javax.annotation.Nullable
  @Schema(example = "testverificationid", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the unique ID you created to identify the verification request.")
  public String getVerificationId() {
    return verificationId;
  }


  public void setVerificationId(String verificationId) {
    this.verificationId = verificationId;
  }


  public PanAdvanceResponseSchema status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * It displays the status of the PAN information.
   * @return status
  **/
  @javax.annotation.Nullable
  @Schema(example = "VALID", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the status of the PAN information.")
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public PanAdvanceResponseSchema message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * It displays details about the success or failure of the API request.
   * @return message
  **/
  @javax.annotation.Nullable
  @Schema(example = "PAN verified successfully", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays details about the success or failure of the API request.")
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public PanAdvanceResponseSchema pan(String pan) {
    
    this.pan = pan;
    return this;
  }

   /**
   * It displays the PAN information entered in the API request.
   * @return pan
  **/
  @javax.annotation.Nullable
  @Schema(example = "AZJPG7110R", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the PAN information entered in the API request.")
  public String getPan() {
    return pan;
  }


  public void setPan(String pan) {
    this.pan = pan;
  }


  public PanAdvanceResponseSchema nameProvided(String nameProvided) {
    
    this.nameProvided = nameProvided;
    return this;
  }

   /**
   * It displays the name entered in the API request.
   * @return nameProvided
  **/
  @javax.annotation.Nullable
  @Schema(example = "JOHN SNOW", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name entered in the API request.")
  public String getNameProvided() {
    return nameProvided;
  }


  public void setNameProvided(String nameProvided) {
    this.nameProvided = nameProvided;
  }


  public PanAdvanceResponseSchema registeredName(String registeredName) {
    
    this.registeredName = registeredName;
    return this;
  }

   /**
   * It displays the registererd name as present in the PAN information.
   * @return registeredName
  **/
  @javax.annotation.Nullable
  @Schema(example = "JOHN SNOW", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the registererd name as present in the PAN information.")
  public String getRegisteredName() {
    return registeredName;
  }


  public void setRegisteredName(String registeredName) {
    this.registeredName = registeredName;
  }


  public PanAdvanceResponseSchema namePanCard(String namePanCard) {
    
    this.namePanCard = namePanCard;
    return this;
  }

   /**
   * It displays the name as present in the PAN information.
   * @return namePanCard
  **/
  @javax.annotation.Nullable
  @Schema(example = "JOHN SNOW", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the name as present in the PAN information.")
  public String getNamePanCard() {
    return namePanCard;
  }


  public void setNamePanCard(String namePanCard) {
    this.namePanCard = namePanCard;
  }


  public PanAdvanceResponseSchema type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * It displays the type of the PAN issued.
   * @return type
  **/
  @javax.annotation.Nullable
  @Schema(example = "Individual or Person", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the type of the PAN issued.")
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public PanAdvanceResponseSchema gender(String gender) {
    
    this.gender = gender;
    return this;
  }

   /**
   * It displays the gender of the individual as present in the PAN information.
   * @return gender
  **/
  @javax.annotation.Nullable
  @Schema(example = "Male", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the gender of the individual as present in the PAN information.")
  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    this.gender = gender;
  }


  public PanAdvanceResponseSchema dateOfBirth(String dateOfBirth) {
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * It displays the date of birth of the individual.
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @Schema(example = "01/02/1990", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the date of birth of the individual.")
  public String getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public PanAdvanceResponseSchema maskedAadhaarNumber(String maskedAadhaarNumber) {
    
    this.maskedAadhaarNumber = maskedAadhaarNumber;
    return this;
  }

   /**
   * It displays the masked aadhaar number of the individual.
   * @return maskedAadhaarNumber
  **/
  @javax.annotation.Nullable
  @Schema(example = "XXXXXXXX8848", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the masked aadhaar number of the individual.")
  public String getMaskedAadhaarNumber() {
    return maskedAadhaarNumber;
  }


  public void setMaskedAadhaarNumber(String maskedAadhaarNumber) {
    this.maskedAadhaarNumber = maskedAadhaarNumber;
  }


  public PanAdvanceResponseSchema email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * It displays the email ID of the individual.
   * @return email
  **/
  @javax.annotation.Nullable
  @Schema(example = "abc@gmail.com", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the email ID of the individual.")
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public PanAdvanceResponseSchema mobileNumber(String mobileNumber) {
    
    this.mobileNumber = mobileNumber;
    return this;
  }

   /**
   * It displays the mobile number of the individual.
   * @return mobileNumber
  **/
  @javax.annotation.Nullable
  @Schema(example = "9999999999", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the mobile number of the individual.")
  public String getMobileNumber() {
    return mobileNumber;
  }


  public void setMobileNumber(String mobileNumber) {
    this.mobileNumber = mobileNumber;
  }


  public PanAdvanceResponseSchema aadhaarLinked(Boolean aadhaarLinked) {
    
    this.aadhaarLinked = aadhaarLinked;
    return this;
  }

   /**
   * It displays the aadhaar and PAN link status.
   * @return aadhaarLinked
  **/
  @javax.annotation.Nullable
  @Schema(example = "true", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "It displays the aadhaar and PAN link status.")
  public Boolean getAadhaarLinked() {
    return aadhaarLinked;
  }


  public void setAadhaarLinked(Boolean aadhaarLinked) {
    this.aadhaarLinked = aadhaarLinked;
  }


  public PanAdvanceResponseSchema address(PanAdvanceResponseSchemaAddress address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  public PanAdvanceResponseSchemaAddress getAddress() {
    return address;
  }


  public void setAddress(PanAdvanceResponseSchemaAddress address) {
    this.address = address;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PanAdvanceResponseSchema panAdvanceResponseSchema = (PanAdvanceResponseSchema) o;
    return Objects.equals(this.referenceId, panAdvanceResponseSchema.referenceId) &&
        Objects.equals(this.verificationId, panAdvanceResponseSchema.verificationId) &&
        Objects.equals(this.status, panAdvanceResponseSchema.status) &&
        Objects.equals(this.message, panAdvanceResponseSchema.message) &&
        Objects.equals(this.pan, panAdvanceResponseSchema.pan) &&
        Objects.equals(this.nameProvided, panAdvanceResponseSchema.nameProvided) &&
        Objects.equals(this.registeredName, panAdvanceResponseSchema.registeredName) &&
        Objects.equals(this.namePanCard, panAdvanceResponseSchema.namePanCard) &&
        Objects.equals(this.type, panAdvanceResponseSchema.type) &&
        Objects.equals(this.gender, panAdvanceResponseSchema.gender) &&
        Objects.equals(this.dateOfBirth, panAdvanceResponseSchema.dateOfBirth) &&
        Objects.equals(this.maskedAadhaarNumber, panAdvanceResponseSchema.maskedAadhaarNumber) &&
        Objects.equals(this.email, panAdvanceResponseSchema.email) &&
        Objects.equals(this.mobileNumber, panAdvanceResponseSchema.mobileNumber) &&
        Objects.equals(this.aadhaarLinked, panAdvanceResponseSchema.aadhaarLinked) &&
        Objects.equals(this.address, panAdvanceResponseSchema.address);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceId, verificationId, status, message, pan, nameProvided, registeredName, namePanCard, type, gender, dateOfBirth, maskedAadhaarNumber, email, mobileNumber, aadhaarLinked, address);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PanAdvanceResponseSchema {\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    verificationId: ").append(toIndentedString(verificationId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pan: ").append(toIndentedString(pan)).append("\n");
    sb.append("    nameProvided: ").append(toIndentedString(nameProvided)).append("\n");
    sb.append("    registeredName: ").append(toIndentedString(registeredName)).append("\n");
    sb.append("    namePanCard: ").append(toIndentedString(namePanCard)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    maskedAadhaarNumber: ").append(toIndentedString(maskedAadhaarNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mobileNumber: ").append(toIndentedString(mobileNumber)).append("\n");
    sb.append("    aadhaarLinked: ").append(toIndentedString(aadhaarLinked)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reference_id");
    openapiFields.add("verification_id");
    openapiFields.add("status");
    openapiFields.add("message");
    openapiFields.add("pan");
    openapiFields.add("name_provided");
    openapiFields.add("registered_name");
    openapiFields.add("name_pan_card");
    openapiFields.add("type");
    openapiFields.add("gender");
    openapiFields.add("date_of_birth");
    openapiFields.add("masked_aadhaar_number");
    openapiFields.add("email");
    openapiFields.add("mobile_number");
    openapiFields.add("aadhaar_linked");
    openapiFields.add("address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PanAdvanceResponseSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("verification_id") != null && !jsonObj.get("verification_id").isJsonNull()) && !jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("pan") != null && !jsonObj.get("pan").isJsonNull()) && !jsonObj.get("pan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pan").toString()));
      }
      if ((jsonObj.get("name_provided") != null && !jsonObj.get("name_provided").isJsonNull()) && !jsonObj.get("name_provided").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_provided` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_provided").toString()));
      }
      if ((jsonObj.get("registered_name") != null && !jsonObj.get("registered_name").isJsonNull()) && !jsonObj.get("registered_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registered_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registered_name").toString()));
      }
      if ((jsonObj.get("name_pan_card") != null && !jsonObj.get("name_pan_card").isJsonNull()) && !jsonObj.get("name_pan_card").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_pan_card` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_pan_card").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("date_of_birth") != null && !jsonObj.get("date_of_birth").isJsonNull()) && !jsonObj.get("date_of_birth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_of_birth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_of_birth").toString()));
      }
      if ((jsonObj.get("masked_aadhaar_number") != null && !jsonObj.get("masked_aadhaar_number").isJsonNull()) && !jsonObj.get("masked_aadhaar_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masked_aadhaar_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masked_aadhaar_number").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("mobile_number") != null && !jsonObj.get("mobile_number").isJsonNull()) && !jsonObj.get("mobile_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_number").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        PanAdvanceResponseSchemaAddress.validateJsonElement(jsonObj.get("address"));
      }
  }


  /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PanAdvanceResponseSchema
  */
  public static boolean validateJsonElementForOneOf(JsonElement jsonElement) throws IOException {

        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("verification_id") != null && !jsonObj.get("verification_id").isJsonNull()) && !jsonObj.get("verification_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("pan") != null && !jsonObj.get("pan").isJsonNull()) && !jsonObj.get("pan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pan").toString()));
      }
      if ((jsonObj.get("name_provided") != null && !jsonObj.get("name_provided").isJsonNull()) && !jsonObj.get("name_provided").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_provided` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_provided").toString()));
      }
      if ((jsonObj.get("registered_name") != null && !jsonObj.get("registered_name").isJsonNull()) && !jsonObj.get("registered_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registered_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registered_name").toString()));
      }
      if ((jsonObj.get("name_pan_card") != null && !jsonObj.get("name_pan_card").isJsonNull()) && !jsonObj.get("name_pan_card").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_pan_card` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_pan_card").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("date_of_birth") != null && !jsonObj.get("date_of_birth").isJsonNull()) && !jsonObj.get("date_of_birth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_of_birth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_of_birth").toString()));
      }
      if ((jsonObj.get("masked_aadhaar_number") != null && !jsonObj.get("masked_aadhaar_number").isJsonNull()) && !jsonObj.get("masked_aadhaar_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masked_aadhaar_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masked_aadhaar_number").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("mobile_number") != null && !jsonObj.get("mobile_number").isJsonNull()) && !jsonObj.get("mobile_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_number").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        PanAdvanceResponseSchemaAddress.validateJsonElement(jsonObj.get("address"));
        return true;
      }
      return false;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PanAdvanceResponseSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PanAdvanceResponseSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PanAdvanceResponseSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PanAdvanceResponseSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<PanAdvanceResponseSchema>() {
           @Override
           public void write(JsonWriter out, PanAdvanceResponseSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PanAdvanceResponseSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PanAdvanceResponseSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PanAdvanceResponseSchema
  * @throws IOException if the JSON string is invalid with respect to PanAdvanceResponseSchema
  */
  public static PanAdvanceResponseSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PanAdvanceResponseSchema.class);
  }

 /**
  * Convert an instance of PanAdvanceResponseSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

