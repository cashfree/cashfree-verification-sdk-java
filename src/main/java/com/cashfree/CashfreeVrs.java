/*
 * Cashfree Verification API's.
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cashfree;

import com.cashfree.model.*;
import com.google.gson.reflect.TypeToken;

import okhttp3.*;
import okhttp3.internal.http.HttpMethod;
import okhttp3.internal.tls.OkHostnameVerifier;
import okhttp3.logging.HttpLoggingInterceptor;
import okhttp3.logging.HttpLoggingInterceptor.Level;
import okio.Buffer;
import okio.BufferedSink;
import okio.Okio;

import javax.net.ssl.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.text.DateFormat;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import com.google.gson.Gson;

import com.cashfree.auth.Authentication;
import com.cashfree.auth.HttpBasicAuth;
import com.cashfree.auth.HttpBearerAuth;
import com.cashfree.auth.ApiKeyAuth;


public class CashfreeVrs {

    enum CFEnvironment {
        SANDBOX,
        PRODUCTION;
    }

  public static String XClientId = "";
  public static String XClientSecret = "";
  public static String XApiVersion = "2023-12-18";
  public static CFEnvironment XEnvironment = CFEnvironment.SANDBOX;

  public static CFEnvironment SANDBOX = CFEnvironment.SANDBOX;
  public static CFEnvironment PRODUCTION = CFEnvironment.PRODUCTION;

  private ApiClient localVarApiClient = new ApiClient();


    /**
     * Build call for vrsAadhaarOcrVerification
     * @param verificationId It is the unique ID you create to identify the request. The maximum character limit is 50. Only alphanumeric, hyphen (-), period (.), and underscore ( _ ) are allowed. (required)
     * @param frontImage It is the scanned image of the front of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB. (required)
     * @param xApiVersion It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12 (optional)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param backImage It is the scanned image of the back of the aadhaar card. Allowed file type - JPEG/JPG/PNG. The max file size of both the files is 10MB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for verifying aadhaar information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for OCR APIs </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsAadhaarOcrVerificationCall(String verificationId, File frontImage, String xApiVersion, String xCfSignature, File backImage, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/aadhaar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (verificationId != null) {
            localVarFormParams.put("verification_id", verificationId);
        }

        if (backImage != null) {
            localVarFormParams.put("back_image", backImage);
        }

        if (frontImage != null) {
            localVarFormParams.put("front_image", frontImage);
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsAadhaarOcrVerificationValidateBeforeCall(String verificationId, File frontImage, String xApiVersion, String xCfSignature, File backImage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling VrsAadhaarOcrVerification(Async)");
        }

        // verify the required parameter 'frontImage' is set
        if (frontImage == null) {
            throw new ApiException("Missing the required parameter 'frontImage' when calling VrsAadhaarOcrVerification(Async)");
        }

        return vrsAadhaarOcrVerificationCall(verificationId, frontImage, xApiVersion, xCfSignature, backImage, _callback);

    }

    public ApiResponse<AadhaarOcrResponseSchema> VrsAadhaarOcrVerification(String verificationId, File frontImage, String xApiVersion, String xCfSignature, File backImage, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsAadhaarOcrVerificationValidateBeforeCall(verificationId, frontImage, xApiVersion, xCfSignature, backImage, null);
        Type localVarReturnType = new TypeToken<AadhaarOcrResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsMaskAadhaar
     * @param image It is the image file of the aadhaar card that needs masking. Accepted formats - short, long, and PVC. Allowed file type - JPEG/JPG/PNG. The maximum file size should be 10 MB. (required)
     * @param verificationId It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed. (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for masking aadhaar number </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request for Aadhaar Masking API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> File size exceeded </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsMaskAadhaarCall(File image, String verificationId, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aadhaar-masking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        if (verificationId != null) {
            localVarFormParams.put("verification_id", verificationId);
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsMaskAadhaarValidateBeforeCall(File image, String verificationId, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling VrsMaskAadhaar(Async)");
        }

        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling VrsMaskAadhaar(Async)");
        }

        return vrsMaskAadhaarCall(image, verificationId, xCfSignature, _callback);

    }

    public ApiResponse<AadhaarMaskingResponseSchema> VrsMaskAadhaar(File image, String verificationId, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsMaskAadhaarValidateBeforeCall(image, verificationId, xCfSignature, null);
        Type localVarReturnType = new TypeToken<AadhaarMaskingResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsOfflineAadhaarSendOtp
     * @param offlineAadhaarSendOtpRequestSchema Find the request parameters to generate OTP for a given aadhar number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for generating the OTP for offline aadhaar verification </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Generate OTP to Verify Aadhaar API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error for requesting another OTP for the same aadhaar within 30 seconds </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsOfflineAadhaarSendOtpCall(OfflineAadhaarSendOtpRequestSchema offlineAadhaarSendOtpRequestSchema, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = offlineAadhaarSendOtpRequestSchema;

        // create path and map variables
        String localVarPath = "/offline-aadhaar/otp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsOfflineAadhaarSendOtpValidateBeforeCall(OfflineAadhaarSendOtpRequestSchema offlineAadhaarSendOtpRequestSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offlineAadhaarSendOtpRequestSchema' is set
        if (offlineAadhaarSendOtpRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'offlineAadhaarSendOtpRequestSchema' when calling VrsOfflineAadhaarSendOtp(Async)");
        }

        return vrsOfflineAadhaarSendOtpCall(offlineAadhaarSendOtpRequestSchema, _callback);

    }

    public ApiResponse<OfflineAadhaarSendOtpResponseSchema> VrsOfflineAadhaarSendOtp(OfflineAadhaarSendOtpRequestSchema offlineAadhaarSendOtpRequestSchema, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsOfflineAadhaarSendOtpValidateBeforeCall(offlineAadhaarSendOtpRequestSchema, null);
        Type localVarReturnType = new TypeToken<OfflineAadhaarSendOtpResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsOfflineAadhaarVerifyOtp
     * @param offlineAadhaarVerifyOtpRequestSchema Find the request parameters to submit the generated OTP (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for submitting the generated OTP for offline aadhaar verification </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Submit OTP for Aadhaar Verification API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsOfflineAadhaarVerifyOtpCall(OfflineAadhaarVerifyOtpRequestSchema offlineAadhaarVerifyOtpRequestSchema, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = offlineAadhaarVerifyOtpRequestSchema;

        // create path and map variables
        String localVarPath = "/offline-aadhaar/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsOfflineAadhaarVerifyOtpValidateBeforeCall(OfflineAadhaarVerifyOtpRequestSchema offlineAadhaarVerifyOtpRequestSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offlineAadhaarVerifyOtpRequestSchema' is set
        if (offlineAadhaarVerifyOtpRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'offlineAadhaarVerifyOtpRequestSchema' when calling VrsOfflineAadhaarVerifyOtp(Async)");
        }

        return vrsOfflineAadhaarVerifyOtpCall(offlineAadhaarVerifyOtpRequestSchema, _callback);

    }

    public ApiResponse<OfflineAadhaarVerifyOtpResponseSchema> VrsOfflineAadhaarVerifyOtp(OfflineAadhaarVerifyOtpRequestSchema offlineAadhaarVerifyOtpRequestSchema, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsOfflineAadhaarVerifyOtpValidateBeforeCall(offlineAadhaarVerifyOtpRequestSchema, null);
        Type localVarReturnType = new TypeToken<OfflineAadhaarVerifyOtpResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsAdvanceEmploymentVerification
     * @param advanceEmploymentRequestSchema Find the request parameters to retrieve employment details (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retreiving employment information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Advanced Employment API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsAdvanceEmploymentVerificationCall(AdvanceEmploymentRequestSchema advanceEmploymentRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = advanceEmploymentRequestSchema;

        // create path and map variables
        String localVarPath = "/advance-employment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsAdvanceEmploymentVerificationValidateBeforeCall(AdvanceEmploymentRequestSchema advanceEmploymentRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'advanceEmploymentRequestSchema' is set
        if (advanceEmploymentRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'advanceEmploymentRequestSchema' when calling VrsAdvanceEmploymentVerification(Async)");
        }

        return vrsAdvanceEmploymentVerificationCall(advanceEmploymentRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<AdvanceEmploymentResponse> VrsAdvanceEmploymentVerification(AdvanceEmploymentRequestSchema advanceEmploymentRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsAdvanceEmploymentVerificationValidateBeforeCall(advanceEmploymentRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<AdvanceEmploymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsCinVerification
     * @param cinRequestSchema Find the request parameters to retrieve your customer&#39;s CIN information (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving the CIN information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Verify Cin API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsCinVerificationCall(CinRequestSchema cinRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = cinRequestSchema;

        // create path and map variables
        String localVarPath = "/cin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsCinVerificationValidateBeforeCall(CinRequestSchema cinRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cinRequestSchema' is set
        if (cinRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'cinRequestSchema' when calling VrsCinVerification(Async)");
        }

        return vrsCinVerificationCall(cinRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<CinResponseSchema> VrsCinVerification(CinRequestSchema cinRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsCinVerificationValidateBeforeCall(cinRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<CinResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsDigilockerVerificationCreateUrl
     * @param digiLockerVerificationCreateUrlRequestSchema Find the request parameters to create a DigiLocker URL to retrieve and verify aadhaar information (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for creating a DigiLocker URL for document verification </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Create DigiLocker URL API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error because of an existing verification id for DigiLocker request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsDigilockerVerificationCreateUrlCall(DigiLockerVerificationCreateUrlRequestSchema digiLockerVerificationCreateUrlRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = digiLockerVerificationCreateUrlRequestSchema;

        // create path and map variables
        String localVarPath = "/digilocker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsDigilockerVerificationCreateUrlValidateBeforeCall(DigiLockerVerificationCreateUrlRequestSchema digiLockerVerificationCreateUrlRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'digiLockerVerificationCreateUrlRequestSchema' is set
        if (digiLockerVerificationCreateUrlRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'digiLockerVerificationCreateUrlRequestSchema' when calling VrsDigilockerVerificationCreateUrl(Async)");
        }

        return vrsDigilockerVerificationCreateUrlCall(digiLockerVerificationCreateUrlRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<DigiLockerVerificationCreateUrlResponseSchema> VrsDigilockerVerificationCreateUrl(DigiLockerVerificationCreateUrlRequestSchema digiLockerVerificationCreateUrlRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsDigilockerVerificationCreateUrlValidateBeforeCall(digiLockerVerificationCreateUrlRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<DigiLockerVerificationCreateUrlResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsDigilockerVerificationFetchDocument
     * @param documentType It is the type of document to be verified. (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param referenceId It is the unique ID created by Cashfree Payments that you receive in the response of Create DigiLocker URL API (optional, default to 12345)
     * @param verificationId It is the unique ID you created to identify the Create DigiLocker URL API request. (optional, default to ABC000123)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving the document from DigiLocker </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Validation in pending state </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Get DigiLocker Document API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found errors when IDs don&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsDigilockerVerificationFetchDocumentCall(String documentType, String xCfSignature, Integer referenceId, String verificationId, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digilocker/document/{document_type}"
            .replace("{" + "document_type" + "}", localVarApiClient.escapeString(documentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference_id", referenceId));
        }

        if (verificationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verification_id", verificationId));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsDigilockerVerificationFetchDocumentValidateBeforeCall(String documentType, String xCfSignature, Integer referenceId, String verificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling VrsDigilockerVerificationFetchDocument(Async)");
        }

        return vrsDigilockerVerificationFetchDocumentCall(documentType, xCfSignature, referenceId, verificationId, _callback);

    }

    public ApiResponse<DigiLockerVerificationGetDocumentResponseSchema> VrsDigilockerVerificationFetchDocument(String documentType, String xCfSignature, Integer referenceId, String verificationId, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsDigilockerVerificationFetchDocumentValidateBeforeCall(documentType, xCfSignature, referenceId, verificationId, null);
        Type localVarReturnType = new TypeToken<DigiLockerVerificationGetDocumentResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsDigilockerVerificationFetchStatus
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param referenceId It is the unique ID created by Cashfree Payments that you received in the Create DigiLocker URL API response. (optional, default to 12345)
     * @param verificationId It is the unique ID you created to identify the Create DigiLocker URL API request. (optional, default to ABC00123)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving the status of the DigiLocker document verification request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Get DigiLocker Verification Status API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found errors when IDs don&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsDigilockerVerificationFetchStatusCall(String xCfSignature, Integer referenceId, String verificationId, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digilocker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference_id", referenceId));
        }

        if (verificationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verification_id", verificationId));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsDigilockerVerificationFetchStatusValidateBeforeCall(String xCfSignature, Integer referenceId, String verificationId, final ApiCallback _callback) throws ApiException {
        return vrsDigilockerVerificationFetchStatusCall(xCfSignature, referenceId, verificationId, _callback);

    }

    public ApiResponse<DigiLockerVerificationGetStatusResponseSchema> VrsDigilockerVerificationFetchStatus(String xCfSignature, Integer referenceId, String verificationId, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsDigilockerVerificationFetchStatusValidateBeforeCall(xCfSignature, referenceId, verificationId, null);
        Type localVarReturnType = new TypeToken<DigiLockerVerificationGetStatusResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsDrivingLicenseVerification
     * @param drivingLicenseRequestSchema Find the request paramenters to retrieve your customer&#39;s driving license information (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving the driving licence information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Verify Driving Licence API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsDrivingLicenseVerificationCall(DrivingLicenseRequestSchema drivingLicenseRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = drivingLicenseRequestSchema;

        // create path and map variables
        String localVarPath = "/driving-license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsDrivingLicenseVerificationValidateBeforeCall(DrivingLicenseRequestSchema drivingLicenseRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'drivingLicenseRequestSchema' is set
        if (drivingLicenseRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'drivingLicenseRequestSchema' when calling VrsDrivingLicenseVerification(Async)");
        }

        return vrsDrivingLicenseVerificationCall(drivingLicenseRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<DrivingLicenseResponseSchema> VrsDrivingLicenseVerification(DrivingLicenseRequestSchema drivingLicenseRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsDrivingLicenseVerificationValidateBeforeCall(drivingLicenseRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<DrivingLicenseResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsESignCreateSignature
     * @param esignVerificationCreateSignatureRequestSchema Find the request parameters to add the details of the document and signer (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for creating an e-signature request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Create E-Sign Request API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsESignCreateSignatureCall(ESignVerificationCreateSignatureRequestSchema esignVerificationCreateSignatureRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = esignVerificationCreateSignatureRequestSchema;

        // create path and map variables
        String localVarPath = "/esignature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsESignCreateSignatureValidateBeforeCall(ESignVerificationCreateSignatureRequestSchema esignVerificationCreateSignatureRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'esignVerificationCreateSignatureRequestSchema' is set
        if (esignVerificationCreateSignatureRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'esignVerificationCreateSignatureRequestSchema' when calling VrsESignCreateSignature(Async)");
        }

        return vrsESignCreateSignatureCall(esignVerificationCreateSignatureRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<ESignVerificationCreateSignatureResponseSchema> VrsESignCreateSignature(ESignVerificationCreateSignatureRequestSchema esignVerificationCreateSignatureRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsESignCreateSignatureValidateBeforeCall(esignVerificationCreateSignatureRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<ESignVerificationCreateSignatureResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsESignUploadDocument
     * @param document Upload the document that requires an e-sign. Allowed file type - PDF. Max file size allowed - 10MB. (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for uploading the document for e-signature </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Upload Document For E-Sign API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsESignUploadDocumentCall(File document, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/esignature/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (document != null) {
            localVarFormParams.put("document", document);
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsESignUploadDocumentValidateBeforeCall(File document, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling VrsESignUploadDocument(Async)");
        }

        return vrsESignUploadDocumentCall(document, xCfSignature, _callback);

    }

    public ApiResponse<ESignVerificationUploadDocumentResponseSchema> VrsESignUploadDocument(File document, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsESignUploadDocumentValidateBeforeCall(document, xCfSignature, null);
        Type localVarReturnType = new TypeToken<ESignVerificationUploadDocumentResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsESignVerificationFetchStatus
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param referenceId It is the unique ID created by Cashfree Payments that you receive in the response of Create E-Sign Request API. (optional, default to 54321)
     * @param verificationId It is the unique ID you create to identify the Create E-Sign Request API. (optional, default to ABC00123)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving the status of an e-signature request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Get E-Sign Status API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsESignVerificationFetchStatusCall(String xCfSignature, Integer referenceId, String verificationId, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/esignature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference_id", referenceId));
        }

        if (verificationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verification_id", verificationId));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsESignVerificationFetchStatusValidateBeforeCall(String xCfSignature, Integer referenceId, String verificationId, final ApiCallback _callback) throws ApiException {
        return vrsESignVerificationFetchStatusCall(xCfSignature, referenceId, verificationId, _callback);

    }

    public ApiResponse<ESignVerificationGetStatusResponseSchema> VrsESignVerificationFetchStatus(String xCfSignature, Integer referenceId, String verificationId, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsESignVerificationFetchStatusValidateBeforeCall(xCfSignature, referenceId, verificationId, null);
        Type localVarReturnType = new TypeToken<ESignVerificationGetStatusResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsFaceMatchVerification
     * @param verificationId It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed. (required)
     * @param firstImage It is the scanned copy of the image 1. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB. (required)
     * @param secondImage It is the scanned copy of the image 2. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB. (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param threshold It is the value to distinguish and match the facial features of the two images. The range is between 0 and 1. The default value is set as 0.7. We conclude that the images match when the analysis is or greater than the value set for threshold. (optional, default to 0.5)
     * @param detectMaskFirstImage It is a boolean value to identify whether the person in the first image is wearing a mask. (optional)
     * @param detectMaskSecondImage It is a boolean value to identify whether the person in the first image is wearing a mask. (optional)
     * @param alignHorizontally It is a boolean value to align the images horizontally before analysing the facial features. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for verifying facial features of your customer in two images </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Face Match API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsFaceMatchVerificationCall(String verificationId, File firstImage, File secondImage, String xCfSignature, String threshold, Boolean detectMaskFirstImage, Boolean detectMaskSecondImage, Boolean alignHorizontally, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/face-match";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (verificationId != null) {
            localVarFormParams.put("verification_id", verificationId);
        }

        if (firstImage != null) {
            localVarFormParams.put("first_image", firstImage);
        }

        if (secondImage != null) {
            localVarFormParams.put("second_image", secondImage);
        }

        if (threshold != null) {
            localVarFormParams.put("threshold", threshold);
        }

        if (detectMaskFirstImage != null) {
            localVarFormParams.put("detect_mask_first_image", detectMaskFirstImage);
        }

        if (detectMaskSecondImage != null) {
            localVarFormParams.put("detect_mask_second_image", detectMaskSecondImage);
        }

        if (alignHorizontally != null) {
            localVarFormParams.put("align_horizontally", alignHorizontally);
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsFaceMatchVerificationValidateBeforeCall(String verificationId, File firstImage, File secondImage, String xCfSignature, String threshold, Boolean detectMaskFirstImage, Boolean detectMaskSecondImage, Boolean alignHorizontally, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling VrsFaceMatchVerification(Async)");
        }

        // verify the required parameter 'firstImage' is set
        if (firstImage == null) {
            throw new ApiException("Missing the required parameter 'firstImage' when calling VrsFaceMatchVerification(Async)");
        }

        // verify the required parameter 'secondImage' is set
        if (secondImage == null) {
            throw new ApiException("Missing the required parameter 'secondImage' when calling VrsFaceMatchVerification(Async)");
        }

        return vrsFaceMatchVerificationCall(verificationId, firstImage, secondImage, xCfSignature, threshold, detectMaskFirstImage, detectMaskSecondImage, alignHorizontally, _callback);

    }

    public ApiResponse<FaceMatchResponseSchema> VrsFaceMatchVerification(String verificationId, File firstImage, File secondImage, String xCfSignature, String threshold, Boolean detectMaskFirstImage, Boolean detectMaskSecondImage, Boolean alignHorizontally, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsFaceMatchVerificationValidateBeforeCall(verificationId, firstImage, secondImage, xCfSignature, threshold, detectMaskFirstImage, detectMaskSecondImage, alignHorizontally, null);
        Type localVarReturnType = new TypeToken<FaceMatchResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsGstinVerification
     * @param gstinRequestSchema Find the request parameters to retrieve GSTIN information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving GSTIN information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Verify GSTIN API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsGstinVerificationCall(GstinRequestSchema gstinRequestSchema, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = gstinRequestSchema;

        // create path and map variables
        String localVarPath = "/gstin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsGstinVerificationValidateBeforeCall(GstinRequestSchema gstinRequestSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gstinRequestSchema' is set
        if (gstinRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'gstinRequestSchema' when calling VrsGstinVerification(Async)");
        }

        return vrsGstinVerificationCall(gstinRequestSchema, _callback);

    }

    public ApiResponse<GstinResponseSchema> VrsGstinVerification(GstinRequestSchema gstinRequestSchema, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsGstinVerificationValidateBeforeCall(gstinRequestSchema, null);
        Type localVarReturnType = new TypeToken<GstinResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsIpVerification
     * @param ipVerificationRequestSchema Find the request parameters to retrieve location information of an IP address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP verified successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Ip Verification </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IP not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsIpVerificationCall(IpVerificationRequestSchema ipVerificationRequestSchema, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = ipVerificationRequestSchema;

        // create path and map variables
        String localVarPath = "/ip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsIpVerificationValidateBeforeCall(IpVerificationRequestSchema ipVerificationRequestSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipVerificationRequestSchema' is set
        if (ipVerificationRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'ipVerificationRequestSchema' when calling VrsIpVerification(Async)");
        }

        return vrsIpVerificationCall(ipVerificationRequestSchema, _callback);

    }

    public ApiResponse<IpVerificationResponseSchema> VrsIpVerification(IpVerificationRequestSchema ipVerificationRequestSchema, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsIpVerificationValidateBeforeCall(ipVerificationRequestSchema, null);
        Type localVarReturnType = new TypeToken<IpVerificationResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsLivelinessCheck
     * @param verificationId It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed. (required)
     * @param image Upload the image of the individual to verify the liveliness of the image. (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param strictCheck It is the boolean value to set the strictness check of the image. Default value for strict_check is false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for checking the liveliness of your customer </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Liveliness Check API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsLivelinessCheckCall(String verificationId, File image, String xCfSignature, Boolean strictCheck, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/liveliness";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (verificationId != null) {
            localVarFormParams.put("verification_id", verificationId);
        }

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        if (strictCheck != null) {
            localVarFormParams.put("strict_check", strictCheck);
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsLivelinessCheckValidateBeforeCall(String verificationId, File image, String xCfSignature, Boolean strictCheck, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling VrsLivelinessCheck(Async)");
        }

        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling VrsLivelinessCheck(Async)");
        }

        return vrsLivelinessCheckCall(verificationId, image, xCfSignature, strictCheck, _callback);

    }

    public ApiResponse<LivelinessResponseSchema> VrsLivelinessCheck(String verificationId, File image, String xCfSignature, Boolean strictCheck, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsLivelinessCheckValidateBeforeCall(verificationId, image, xCfSignature, strictCheck, null);
        Type localVarReturnType = new TypeToken<LivelinessResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsNameMatchVerification
     * @param nameMatchRequestSchema Find the request parameters to verify names with variations (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for verifing name variations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Name Match API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsNameMatchVerificationCall(NameMatchRequestSchema nameMatchRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = nameMatchRequestSchema;

        // create path and map variables
        String localVarPath = "/name-match";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsNameMatchVerificationValidateBeforeCall(NameMatchRequestSchema nameMatchRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nameMatchRequestSchema' is set
        if (nameMatchRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'nameMatchRequestSchema' when calling VrsNameMatchVerification(Async)");
        }

        return vrsNameMatchVerificationCall(nameMatchRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<NameMatchResponseSchema> VrsNameMatchVerification(NameMatchRequestSchema nameMatchRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsNameMatchVerificationValidateBeforeCall(nameMatchRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<NameMatchResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsBulkPanVerification
     * @param bulkPanRequestSchema Find the request parameters to verify a large number of PAN information (required)
     * @param xApiVersion It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12 (optional)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for verifying a large number of PAN information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Verify Bulk PAN API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsBulkPanVerificationCall(BulkPanRequestSchema bulkPanRequestSchema, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = bulkPanRequestSchema;

        // create path and map variables
        String localVarPath = "/pan/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsBulkPanVerificationValidateBeforeCall(BulkPanRequestSchema bulkPanRequestSchema, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkPanRequestSchema' is set
        if (bulkPanRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'bulkPanRequestSchema' when calling VrsBulkPanVerification(Async)");
        }

        return vrsBulkPanVerificationCall(bulkPanRequestSchema, xApiVersion, xCfSignature, _callback);

    }

    public ApiResponse<PostPanBulkResponseSchema> VrsBulkPanVerification(BulkPanRequestSchema bulkPanRequestSchema, String xApiVersion, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsBulkPanVerificationValidateBeforeCall(bulkPanRequestSchema, xApiVersion, xCfSignature, null);
        Type localVarReturnType = new TypeToken<PostPanBulkResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsFetchBulkPanDetails
     * @param referenceId It is the unique ID created by Cashfree Payments that you receive in the response of Verify PAN in Bulk API. (required)
     * @param bulkVerificationId It is the unique ID you created to identify the Verify PAN in Bulk API request. (required)
     * @param xApiVersion It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12 (optional)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for verifying a large number of PAN information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Get Bulk PAN Status API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsFetchBulkPanDetailsCall(String referenceId, String bulkVerificationId, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pan/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference_id", referenceId));
        }

        if (bulkVerificationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bulk_verification_id", bulkVerificationId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsFetchBulkPanDetailsValidateBeforeCall(String referenceId, String bulkVerificationId, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'referenceId' is set
        if (referenceId == null) {
            throw new ApiException("Missing the required parameter 'referenceId' when calling VrsFetchBulkPanDetails(Async)");
        }

        // verify the required parameter 'bulkVerificationId' is set
        if (bulkVerificationId == null) {
            throw new ApiException("Missing the required parameter 'bulkVerificationId' when calling VrsFetchBulkPanDetails(Async)");
        }

        return vrsFetchBulkPanDetailsCall(referenceId, bulkVerificationId, xApiVersion, xCfSignature, _callback);

    }

    public ApiResponse<GetPanBulkResponseSchema> VrsFetchBulkPanDetails(String referenceId, String bulkVerificationId, String xApiVersion, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsFetchBulkPanDetailsValidateBeforeCall(referenceId, bulkVerificationId, xApiVersion, xCfSignature, null);
        Type localVarReturnType = new TypeToken<GetPanBulkResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsFetchPanDetails
     * @param referenceId It is the unique ID created by Cashfree Payments that you receive in the response of Verify PAN Sync API. (required)
     * @param xApiVersion It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12 (optional)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for verifiying PAN information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error because x-client-id is missing in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsFetchPanDetailsCall(String referenceId, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pan/{reference_id}"
            .replace("{" + "reference_id" + "}", localVarApiClient.escapeString(referenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsFetchPanDetailsValidateBeforeCall(String referenceId, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'referenceId' is set
        if (referenceId == null) {
            throw new ApiException("Missing the required parameter 'referenceId' when calling VrsFetchPanDetails(Async)");
        }

        return vrsFetchPanDetailsCall(referenceId, xApiVersion, xCfSignature, _callback);

    }

    public ApiResponse<GetVerifyPanResponseSchema> VrsFetchPanDetails(String referenceId, String xApiVersion, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsFetchPanDetailsValidateBeforeCall(referenceId, xApiVersion, xCfSignature, null);
        Type localVarReturnType = new TypeToken<GetVerifyPanResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsPanAdvanceVerification
     * @param panAdvanceRequestSchema Find the request parameters to retrieve the PAN information (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving the PAN information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for PAN 360 API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsPanAdvanceVerificationCall(PanAdvanceRequestSchema panAdvanceRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = panAdvanceRequestSchema;

        // create path and map variables
        String localVarPath = "/pan/advance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsPanAdvanceVerificationValidateBeforeCall(PanAdvanceRequestSchema panAdvanceRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'panAdvanceRequestSchema' is set
        if (panAdvanceRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'panAdvanceRequestSchema' when calling VrsPanAdvanceVerification(Async)");
        }

        return vrsPanAdvanceVerificationCall(panAdvanceRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<PanAdvanceResponseSchema> VrsPanAdvanceVerification(PanAdvanceRequestSchema panAdvanceRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsPanAdvanceVerificationValidateBeforeCall(panAdvanceRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<PanAdvanceResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsPanOcrVerification
     * @param verificationId It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed. (required)
     * @param frontImage It is the scanned copy of the PAN card. Allowed file type - JPEG/JPG/PNG. (required)
     * @param xApiVersion It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12 (optional)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for verifiying the PAN information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for OCR APIs </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsPanOcrVerificationCall(String verificationId, File frontImage, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/pan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (verificationId != null) {
            localVarFormParams.put("verification_id", verificationId);
        }

        if (frontImage != null) {
            localVarFormParams.put("front_image", frontImage);
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsPanOcrVerificationValidateBeforeCall(String verificationId, File frontImage, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling VrsPanOcrVerification(Async)");
        }

        // verify the required parameter 'frontImage' is set
        if (frontImage == null) {
            throw new ApiException("Missing the required parameter 'frontImage' when calling VrsPanOcrVerification(Async)");
        }

        return vrsPanOcrVerificationCall(verificationId, frontImage, xApiVersion, xCfSignature, _callback);

    }

    public ApiResponse<PanOcrResponseSchema> VrsPanOcrVerification(String verificationId, File frontImage, String xApiVersion, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsPanOcrVerificationValidateBeforeCall(verificationId, frontImage, xApiVersion, xCfSignature, null);
        Type localVarReturnType = new TypeToken<PanOcrResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsPanVerification
     * @param panRequestSchema Find the request parameters to verify whether the PAN information is valid (required)
     * @param xApiVersion It is the API version. To receive the aadhaar seeding status in the response, use any date after 2022-09-12 (optional)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for verifiying PAN information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Verify PAN Sync API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsPanVerificationCall(PanRequestSchema panRequestSchema, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = panRequestSchema;

        // create path and map variables
        String localVarPath = "/pan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsPanVerificationValidateBeforeCall(PanRequestSchema panRequestSchema, String xApiVersion, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'panRequestSchema' is set
        if (panRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'panRequestSchema' when calling VrsPanVerification(Async)");
        }

        return vrsPanVerificationCall(panRequestSchema, xApiVersion, xCfSignature, _callback);

    }

    public ApiResponse<GetVerifyPanResponseSchema> VrsPanVerification(PanRequestSchema panRequestSchema, String xApiVersion, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsPanVerificationValidateBeforeCall(panRequestSchema, xApiVersion, xCfSignature, null);
        Type localVarReturnType = new TypeToken<GetVerifyPanResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsPanToGstinVerification
     * @param panToGstinRequestSchema Find the request parameters to retrieve the list of GSTIN associated with a PAN (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving the list of GSTIN associated with the entered PAN </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for PAN to GSTIN API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsPanToGstinVerificationCall(PanToGstinRequestSchema panToGstinRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = panToGstinRequestSchema;

        // create path and map variables
        String localVarPath = "/pan-gstin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsPanToGstinVerificationValidateBeforeCall(PanToGstinRequestSchema panToGstinRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'panToGstinRequestSchema' is set
        if (panToGstinRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'panToGstinRequestSchema' when calling VrsPanToGstinVerification(Async)");
        }

        return vrsPanToGstinVerificationCall(panToGstinRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<PanToGstinResponseSchema> VrsPanToGstinVerification(PanToGstinRequestSchema panToGstinRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsPanToGstinVerificationValidateBeforeCall(panToGstinRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<PanToGstinResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsPassportVerification
     * @param passportVerificationRequestSchema Find the request parameter to retrieve your customer&#39;s passport information (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieveing passport information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Verify Passport API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsPassportVerificationCall(PassportVerificationRequestSchema passportVerificationRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = passportVerificationRequestSchema;

        // create path and map variables
        String localVarPath = "/passport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsPassportVerificationValidateBeforeCall(PassportVerificationRequestSchema passportVerificationRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'passportVerificationRequestSchema' is set
        if (passportVerificationRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'passportVerificationRequestSchema' when calling VrsPassportVerification(Async)");
        }

        return vrsPassportVerificationCall(passportVerificationRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<PassportVerificationResponseSchema> VrsPassportVerification(PassportVerificationRequestSchema passportVerificationRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsPassportVerificationValidateBeforeCall(passportVerificationRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<PassportVerificationResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsReverseGeocodingVerification
     * @param reverseGeocodingRequestSchema Find the request parameters to retrieve the physical address of a location (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving physical address of a location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Reverse Geocoding API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsReverseGeocodingVerificationCall(ReverseGeocodingRequestSchema reverseGeocodingRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = reverseGeocodingRequestSchema;

        // create path and map variables
        String localVarPath = "/reverse-geocoding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsReverseGeocodingVerificationValidateBeforeCall(ReverseGeocodingRequestSchema reverseGeocodingRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reverseGeocodingRequestSchema' is set
        if (reverseGeocodingRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'reverseGeocodingRequestSchema' when calling VrsReverseGeocodingVerification(Async)");
        }

        return vrsReverseGeocodingVerificationCall(reverseGeocodingRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<ReverseGeocodingResponseSchema> VrsReverseGeocodingVerification(ReverseGeocodingRequestSchema reverseGeocodingRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsReverseGeocodingVerificationValidateBeforeCall(reverseGeocodingRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<ReverseGeocodingResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsReversePennyDropCreateRequest
     * @param createRequestRequestSchema Find the request parameters to create a reverse penny drop request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for creating a reverse penny drop request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Create Request API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsReversePennyDropCreateRequestCall(CreateRequestRequestSchema createRequestRequestSchema, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = createRequestRequestSchema;

        // create path and map variables
        String localVarPath = "/reverse-penny-drop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsReversePennyDropCreateRequestValidateBeforeCall(CreateRequestRequestSchema createRequestRequestSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createRequestRequestSchema' is set
        if (createRequestRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'createRequestRequestSchema' when calling VrsReversePennyDropCreateRequest(Async)");
        }

        return vrsReversePennyDropCreateRequestCall(createRequestRequestSchema, _callback);

    }

    public ApiResponse<CreateRequestResponseSchema> VrsReversePennyDropCreateRequest(CreateRequestRequestSchema createRequestRequestSchema, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsReversePennyDropCreateRequestValidateBeforeCall(createRequestRequestSchema, null);
        Type localVarReturnType = new TypeToken<CreateRequestResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsReversePennyDropFetchStatus
     * @param refId It is the unique ID created by Cashfree Payments that you receive in the response of Create Reverse Penny Drop Request API. (optional, default to 10)
     * @param verificationId It is the unique ID created by you to identify the reverse penny drop verification request. (optional, default to 1234)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retreiving the status of RPD request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Get Details API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsReversePennyDropFetchStatusCall(String refId, String verificationId, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/remitter/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref_id", refId));
        }

        if (verificationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verification_id", verificationId));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsReversePennyDropFetchStatusValidateBeforeCall(String refId, String verificationId, final ApiCallback _callback) throws ApiException {
        return vrsReversePennyDropFetchStatusCall(refId, verificationId, _callback);

    }

    public ApiResponse<GetStatusRpdResponseSchema> VrsReversePennyDropFetchStatus(String refId, String verificationId, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsReversePennyDropFetchStatusValidateBeforeCall(refId, verificationId, null);
        Type localVarReturnType = new TypeToken<GetStatusRpdResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsVehicleRcVerification
     * @param vehicleRcRequestSchema Find the request parameters to retrieve the information of a vehicle&#39;s registration certificate (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retrieving vehicle&#39;s registration certification information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Verify RC API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsVehicleRcVerificationCall(VehicleRcRequestSchema vehicleRcRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = vehicleRcRequestSchema;

        // create path and map variables
        String localVarPath = "/vehicle-rc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsVehicleRcVerificationValidateBeforeCall(VehicleRcRequestSchema vehicleRcRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vehicleRcRequestSchema' is set
        if (vehicleRcRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'vehicleRcRequestSchema' when calling VrsVehicleRcVerification(Async)");
        }

        return vrsVehicleRcVerificationCall(vehicleRcRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<VehicleRcResponseSchema> VrsVehicleRcVerification(VehicleRcRequestSchema vehicleRcRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsVehicleRcVerificationValidateBeforeCall(vehicleRcRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<VehicleRcResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }


    /**
     * Build call for vrsVoterIdVerification
     * @param voterIdRequestSchema Find the request parameters to fetch voter ID details (required)
     * @param xCfSignature Send the signature if IP is not whitelisted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response for retreiving voter ID information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors for Verify Voter ID API </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid client ID and client secret combination </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication error (IP not whitelisted) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error because of insufficient balance to process this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Gateway error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrsVoterIdVerificationCall(VoterIdRequestSchema voterIdRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        String basePath = "https://sandbox.cashfree.com/verification";

        if(CashfreeVrs.XEnvironment == CFEnvironment.PRODUCTION) {
            basePath = "https://api.cashfree.com/verification";
        }

        Object localVarPostBody = voterIdRequestSchema;

        // create path and map variables
        String localVarPath = "/voter-id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCfSignature != null) {
            localVarHeaderParams.put("x-cf-signature", localVarApiClient.parameterToString(xCfSignature));
        }


        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientSecret = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientSecret");
            XClientSecret.setApiKey(CashfreeVrs.XClientSecret);
        }

        if(CashfreeVrs.XClientSecret != null) {
            ApiKeyAuth XClientID = (ApiKeyAuth) localVarApiClient.getAuthentication("XClientID");
            XClientID.setApiKey(CashfreeVrs.XClientId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        localVarHeaderParams.put("x-sdk-platform", "javasdk-2.0.4");

        String[] localVarAuthNames = new String[] { "XClientSecret", "XClientID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrsVoterIdVerificationValidateBeforeCall(VoterIdRequestSchema voterIdRequestSchema, String xCfSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voterIdRequestSchema' is set
        if (voterIdRequestSchema == null) {
            throw new ApiException("Missing the required parameter 'voterIdRequestSchema' when calling VrsVoterIdVerification(Async)");
        }

        return vrsVoterIdVerificationCall(voterIdRequestSchema, xCfSignature, _callback);

    }

    public ApiResponse<VoterIdResponseSchema> VrsVoterIdVerification(VoterIdRequestSchema voterIdRequestSchema, String xCfSignature, OkHttpClient httpClient) throws ApiException {
        if(httpClient != null) {
            localVarApiClient.httpClient = httpClient;
        }
        okhttp3.Call localVarCall = vrsVoterIdVerificationValidateBeforeCall(voterIdRequestSchema, xCfSignature, null);
        Type localVarReturnType = new TypeToken<VoterIdResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }



    /**
 * <p>ApiClient class.</p>
 */
static class ApiClient {

    private String basePath = "https://sandbox.cashfree.com/verification";
    protected List<ServerConfiguration> servers = new ArrayList<ServerConfiguration>(Arrays.asList(
    new ServerConfiguration(
      "https://sandbox.cashfree.com/verification",
      "Test Server",
      new HashMap<String, ServerVariable>()
    ),
    new ServerConfiguration(
      "https://api.cashfree.com/verification",
      "Production Server",
      new HashMap<String, ServerVariable>()
    )
  ));
    protected Integer serverIndex = 0;
    protected Map<String, String> serverVariables = null;
    private boolean debugging = false;
    private Map<String, String> defaultHeaderMap = new HashMap<String, String>();
    private Map<String, String> defaultCookieMap = new HashMap<String, String>();
    private String tempFolderPath = null;

    private Map<String, Authentication> authentications;

    private DateFormat dateFormat;
    private DateFormat datetimeFormat;
    private boolean lenientDatetimeFormat;
    private int dateLength;

    private InputStream sslCaCert;
    private boolean verifyingSsl;
    private KeyManager[] keyManagers;

    private OkHttpClient httpClient;
    private JSON json;

    private HttpLoggingInterceptor loggingInterceptor;

    /**
     * Basic constructor for ApiClient
     */
    public ApiClient() {
        init();
        initHttpClient();

        // Setup authentications (key: authentication name, value: authentication).
        authentications.put("XClientID", new ApiKeyAuth("header", "x-client-id"));
        authentications.put("XClientSecret", new ApiKeyAuth("header", "x-client-secret"));
        // Prevent the authentications from being modified.
        authentications = Collections.unmodifiableMap(authentications);
    }

    /**
     * Basic constructor with custom OkHttpClient
     *
     * @param client a {@link okhttp3.OkHttpClient} object
     */
    public ApiClient(OkHttpClient client) {
        init();

        httpClient = client;

        // Setup authentications (key: authentication name, value: authentication).
        authentications.put("XClientID", new ApiKeyAuth("header", "x-client-id"));
        authentications.put("XClientSecret", new ApiKeyAuth("header", "x-client-secret"));
        // Prevent the authentications from being modified.
        authentications = Collections.unmodifiableMap(authentications);
    }

    private void initHttpClient() {
        initHttpClient(Collections.<Interceptor>emptyList());
    }

    private void initHttpClient(List<Interceptor> interceptors) {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        builder.addNetworkInterceptor(getProgressInterceptor());
        for (Interceptor interceptor: interceptors) {
            builder.addInterceptor(interceptor);
        }

        httpClient = builder.build();
    }

    private void init() {
        verifyingSsl = true;

        json = new JSON();

        // Set default User-Agent.
        setUserAgent("OpenAPI-Generator/2.0.4/java");

        authentications = new HashMap<String, Authentication>();
    }

    /**
     * Get base path
     *
     * @return Base path
     */
    public String getBasePath() {
        return basePath;
    }

    /**
     * Set base path
     *
     * @param basePath Base path of the URL (e.g https://sandbox.cashfree.com/verification
     * @return An instance of OkHttpClient
     */
    public ApiClient setBasePath(String basePath) {
        this.basePath = basePath;
        this.serverIndex = null;
        return this;
    }

    public List<ServerConfiguration> getServers() {
        return servers;
    }

    public ApiClient setServers(List<ServerConfiguration> servers) {
        this.servers = servers;
        return this;
    }

    public Integer getServerIndex() {
        return serverIndex;
    }

    public ApiClient setServerIndex(Integer serverIndex) {
        this.serverIndex = serverIndex;
        return this;
    }

    public Map<String, String> getServerVariables() {
        return serverVariables;
    }

    public ApiClient setServerVariables(Map<String, String> serverVariables) {
        this.serverVariables = serverVariables;
        return this;
    }

    /**
     * Get HTTP client
     *
     * @return An instance of OkHttpClient
     */
    public OkHttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Set HTTP client, which must never be null.
     *
     * @param newHttpClient An instance of OkHttpClient
     * @return Api Client
     * @throws java.lang.NullPointerException when newHttpClient is null
     */
    public ApiClient setHttpClient(OkHttpClient newHttpClient) {
        this.httpClient = Objects.requireNonNull(newHttpClient, "HttpClient must not be null!");
        return this;
    }

    /**
     * Get JSON
     *
     * @return JSON object
     */
    public JSON getJSON() {
        return json;
    }

    /**
     * Set JSON
     *
     * @param json JSON object
     * @return Api client
     */
    public ApiClient setJSON(JSON json) {
        this.json = json;
        return this;
    }

    /**
     * True if isVerifyingSsl flag is on
     *
     * @return True if isVerifySsl flag is on
     */
    public boolean isVerifyingSsl() {
        return verifyingSsl;
    }

    /**
     * Configure whether to verify certificate and hostname when making https requests.
     * Default to true.
     * NOTE: Do NOT set to false in production code, otherwise you would face multiple types of cryptographic attacks.
     *
     * @param verifyingSsl True to verify TLS/SSL connection
     * @return ApiClient
     */
    public ApiClient setVerifyingSsl(boolean verifyingSsl) {
        this.verifyingSsl = verifyingSsl;
        applySslSettings();
        return this;
    }

    /**
     * Get SSL CA cert.
     *
     * @return Input stream to the SSL CA cert
     */
    public InputStream getSslCaCert() {
        return sslCaCert;
    }

    /**
     * Configure the CA certificate to be trusted when making https requests.
     * Use null to reset to default.
     *
     * @param sslCaCert input stream for SSL CA cert
     * @return ApiClient
     */
    public ApiClient setSslCaCert(InputStream sslCaCert) {
        this.sslCaCert = sslCaCert;
        applySslSettings();
        return this;
    }

    /**
     * <p>Getter for the field <code>keyManagers</code>.</p>
     *
     * @return an array of {@link javax.net.ssl.KeyManager} objects
     */
    public KeyManager[] getKeyManagers() {
        return keyManagers;
    }

    /**
     * Configure client keys to use for authorization in an SSL session.
     * Use null to reset to default.
     *
     * @param managers The KeyManagers to use
     * @return ApiClient
     */
    public ApiClient setKeyManagers(KeyManager[] managers) {
        this.keyManagers = managers;
        applySslSettings();
        return this;
    }

    /**
     * <p>Getter for the field <code>dateFormat</code>.</p>
     *
     * @return a {@link java.text.DateFormat} object
     */
    public DateFormat getDateFormat() {
        return dateFormat;
    }

    /**
     * <p>Setter for the field <code>dateFormat</code>.</p>
     *
     * @param dateFormat a {@link java.text.DateFormat} object
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setDateFormat(DateFormat dateFormat) {
        JSON.setDateFormat(dateFormat);
        return this;
    }

    /**
     * <p>Set SqlDateFormat.</p>
     *
     * @param dateFormat a {@link java.text.DateFormat} object
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setSqlDateFormat(DateFormat dateFormat) {
        JSON.setSqlDateFormat(dateFormat);
        return this;
    }

    /**
     * <p>Set OffsetDateTimeFormat.</p>
     *
     * @param dateFormat a {@link java.time.format.DateTimeFormatter} object
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        JSON.setOffsetDateTimeFormat(dateFormat);
        return this;
    }

    /**
     * <p>Set LocalDateFormat.</p>
     *
     * @param dateFormat a {@link java.time.format.DateTimeFormatter} object
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setLocalDateFormat(DateTimeFormatter dateFormat) {
        JSON.setLocalDateFormat(dateFormat);
        return this;
    }

    /**
     * <p>Set LenientOnJson.</p>
     *
     * @param lenientOnJson a boolean
     * @return a {@link com.cashfree.ApiClient} object
     */
    public ApiClient setLenientOnJson(boolean lenientOnJson) {
        JSON.setLenientOnJson(lenientOnJson);
        return this;
    }

    /**
     * Get authentications (key: authentication name, value: authentication).
     *
     * @return Map of authentication objects
     */
    public Map<String, Authentication> getAuthentications() {
        return authentications;
    }

    /**
     * Get authentication for the given name.
     *
     * @param authName The authentication name
     * @return The authentication, null if not found
     */
    public Authentication getAuthentication(String authName) {
        return authentications.get(authName);
    }


    /**
     * Helper method to set username for the first HTTP basic authentication.
     *
     * @param username Username
     */
    public void setUsername(String username) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof HttpBasicAuth) {
                ((HttpBasicAuth) auth).setUsername(username);
                return;
            }
        }
        throw new RuntimeException("No HTTP basic authentication configured!");
    }

    /**
     * Helper method to set password for the first HTTP basic authentication.
     *
     * @param password Password
     */
    public void setPassword(String password) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof HttpBasicAuth) {
                ((HttpBasicAuth) auth).setPassword(password);
                return;
            }
        }
        throw new RuntimeException("No HTTP basic authentication configured!");
    }

    /**
     * Helper method to set API key value for the first API key authentication.
     *
     * @param apiKey API key
     */
    public void setApiKey(String apiKey) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof ApiKeyAuth) {
                ((ApiKeyAuth) auth).setApiKey(apiKey);
                return;
            }
        }
        throw new RuntimeException("No API key authentication configured!");
    }

    /**
     * Helper method to set API key prefix for the first API key authentication.
     *
     * @param apiKeyPrefix API key prefix
     */
    public void setApiKeyPrefix(String apiKeyPrefix) {
        for (Authentication auth : authentications.values()) {
            if (auth instanceof ApiKeyAuth) {
                ((ApiKeyAuth) auth).setApiKeyPrefix(apiKeyPrefix);
                return;
            }
        }
        throw new RuntimeException("No API key authentication configured!");
    }

    /**
     * Helper method to set access token for the first OAuth2 authentication.
     *
     * @param accessToken Access token
     */
    public void setAccessToken(String accessToken) {
        throw new RuntimeException("No OAuth2 authentication configured!");
    }

    /**
     * Helper method to set credentials for AWSV4 Signature
     *
     * @param accessKey Access Key
     * @param secretKey Secret Key
     * @param region Region
     * @param service Service to access to
     */
    public void setAWS4Configuration(String accessKey, String secretKey, String region, String service) {
        throw new RuntimeException("No AWS4 authentication configured!");
    }

    /**
     * Set the User-Agent header's value (by adding to the default header map).
     *
     * @param userAgent HTTP request's user agent
     * @return ApiClient
     */
    public ApiClient setUserAgent(String userAgent) {
        addDefaultHeader("User-Agent", userAgent);
        return this;
    }

    /**
     * Add a default header.
     *
     * @param key The header's key
     * @param value The header's value
     * @return ApiClient
     */
    public ApiClient addDefaultHeader(String key, String value) {
        defaultHeaderMap.put(key, value);
        return this;
    }

    /**
     * Add a default cookie.
     *
     * @param key The cookie's key
     * @param value The cookie's value
     * @return ApiClient
     */
    public ApiClient addDefaultCookie(String key, String value) {
        defaultCookieMap.put(key, value);
        return this;
    }

    /**
     * Check that whether debugging is enabled for this API client.
     *
     * @return True if debugging is enabled, false otherwise.
     */
    public boolean isDebugging() {
        return debugging;
    }

    /**
     * Enable/disable debugging for this API client.
     *
     * @param debugging To enable (true) or disable (false) debugging
     * @return ApiClient
     */
    public ApiClient setDebugging(boolean debugging) {
        if (debugging != this.debugging) {
            if (debugging) {
                loggingInterceptor = new HttpLoggingInterceptor();
                loggingInterceptor.setLevel(Level.BODY);
                httpClient = httpClient.newBuilder().addInterceptor(loggingInterceptor).build();
            } else {
                final OkHttpClient.Builder builder = httpClient.newBuilder();
                builder.interceptors().remove(loggingInterceptor);
                httpClient = builder.build();
                loggingInterceptor = null;
            }
        }
        this.debugging = debugging;
        return this;
    }

    /**
     * The path of temporary folder used to store downloaded files from endpoints
     * with file response. The default value is <code>null</code>, i.e. using
     * the system's default temporary folder.
     *
     * @see <a href="https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createTempFile(java.lang.String,%20java.lang.String,%20java.nio.file.attribute.FileAttribute...)">createTempFile</a>
     * @return Temporary folder path
     */
    public String getTempFolderPath() {
        return tempFolderPath;
    }

    /**
     * Set the temporary folder path (for downloading files)
     *
     * @param tempFolderPath Temporary folder path
     * @return ApiClient
     */
    public ApiClient setTempFolderPath(String tempFolderPath) {
        this.tempFolderPath = tempFolderPath;
        return this;
    }

    /**
     * Get connection timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getConnectTimeout() {
        return httpClient.connectTimeoutMillis();
    }

    /**
     * Sets the connect timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link java.lang.Integer#MAX_VALUE}.
     *
     * @param connectionTimeout connection timeout in milliseconds
     * @return Api client
     */
    public ApiClient setConnectTimeout(int connectionTimeout) {
        httpClient = httpClient.newBuilder().connectTimeout(connectionTimeout, TimeUnit.MILLISECONDS).build();
        return this;
    }

    /**
     * Get read timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getReadTimeout() {
        return httpClient.readTimeoutMillis();
    }

    /**
     * Sets the read timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link java.lang.Integer#MAX_VALUE}.
     *
     * @param readTimeout read timeout in milliseconds
     * @return Api client
     */
    public ApiClient setReadTimeout(int readTimeout) {
        httpClient = httpClient.newBuilder().readTimeout(readTimeout, TimeUnit.MILLISECONDS).build();
        return this;
    }

    /**
     * Get write timeout (in milliseconds).
     *
     * @return Timeout in milliseconds
     */
    public int getWriteTimeout() {
        return httpClient.writeTimeoutMillis();
    }

    /**
     * Sets the write timeout (in milliseconds).
     * A value of 0 means no timeout, otherwise values must be between 1 and
     * {@link java.lang.Integer#MAX_VALUE}.
     *
     * @param writeTimeout connection timeout in milliseconds
     * @return Api client
     */
    public ApiClient setWriteTimeout(int writeTimeout) {
        httpClient = httpClient.newBuilder().writeTimeout(writeTimeout, TimeUnit.MILLISECONDS).build();
        return this;
    }


    /**
     * Format the given parameter object into string.
     *
     * @param param Parameter
     * @return String representation of the parameter
     */
    public String parameterToString(Object param) {
        if (param == null) {
            return "";
        } else if (param instanceof Date || param instanceof OffsetDateTime || param instanceof LocalDate) {
            //Serialize to json string and remove the " enclosing characters
            String jsonStr = JSON.serialize(param);
            return jsonStr.substring(1, jsonStr.length() - 1);
        } else if (param instanceof Collection) {
            StringBuilder b = new StringBuilder();
            for (Object o : (Collection) param) {
                if (b.length() > 0) {
                    b.append(",");
                }
                b.append(o);
            }
            return b.toString();
        } else {
            return String.valueOf(param);
        }
    }

    /**
     * Formats the specified query parameter to a list containing a single {@code Pair} object.
     *
     * Note that {@code value} must not be a collection.
     *
     * @param name The name of the parameter.
     * @param value The value of the parameter.
     * @return A list containing a single {@code Pair} object.
     */
    public List<Pair> parameterToPair(String name, Object value) {
        List<Pair> params = new ArrayList<Pair>();

        // preconditions
        if (name == null || name.isEmpty() || value == null || value instanceof Collection) {
            return params;
        }

        params.add(new Pair(name, parameterToString(value)));
        return params;
    }

    /**
     * Formats the specified collection query parameters to a list of {@code Pair} objects.
     *
     * Note that the values of each of the returned Pair objects are percent-encoded.
     *
     * @param collectionFormat The collection format of the parameter.
     * @param name The name of the parameter.
     * @param value The value of the parameter.
     * @return A list of {@code Pair} objects.
     */
    public List<Pair> parameterToPairs(String collectionFormat, String name, Collection value) {
        List<Pair> params = new ArrayList<Pair>();

        // preconditions
        if (name == null || name.isEmpty() || value == null || value.isEmpty()) {
            return params;
        }

        // create the params based on the collection format
        if ("multi".equals(collectionFormat)) {
            for (Object item : value) {
                params.add(new Pair(name, escapeString(parameterToString(item))));
            }
            return params;
        }

        // collectionFormat is assumed to be "csv" by default
        String delimiter = ",";

        // escape all delimiters except commas, which are URI reserved
        // characters
        if ("ssv".equals(collectionFormat)) {
            delimiter = escapeString(" ");
        } else if ("tsv".equals(collectionFormat)) {
            delimiter = escapeString("\t");
        } else if ("pipes".equals(collectionFormat)) {
            delimiter = escapeString("|");
        }

        StringBuilder sb = new StringBuilder();
        for (Object item : value) {
            sb.append(delimiter);
            sb.append(escapeString(parameterToString(item)));
        }

        params.add(new Pair(name, sb.substring(delimiter.length())));

        return params;
    }

    /**
     * Formats the specified collection path parameter to a string value.
     *
     * @param collectionFormat The collection format of the parameter.
     * @param value The value of the parameter.
     * @return String representation of the parameter
     */
    public String collectionPathParameterToString(String collectionFormat, Collection value) {
        // create the value based on the collection format
        if ("multi".equals(collectionFormat)) {
            // not valid for path params
            return parameterToString(value);
        }

        // collectionFormat is assumed to be "csv" by default
        String delimiter = ",";

        if ("ssv".equals(collectionFormat)) {
            delimiter = " ";
        } else if ("tsv".equals(collectionFormat)) {
            delimiter = "\t";
        } else if ("pipes".equals(collectionFormat)) {
            delimiter = "|";
        }

        StringBuilder sb = new StringBuilder() ;
        for (Object item : value) {
            sb.append(delimiter);
            sb.append(parameterToString(item));
        }

        return sb.substring(delimiter.length());
    }

    /**
     * Sanitize filename by removing path.
     * e.g. ../../sun.gif becomes sun.gif
     *
     * @param filename The filename to be sanitized
     * @return The sanitized filename
     */
    public String sanitizeFilename(String filename) {
        return filename.replaceAll(".*[/\\\\]", "");
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * "* / *" is also default to JSON
     * @param mime MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public boolean isJsonMime(String mime) {
        String jsonMime = "(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$";
        return mime != null && (mime.matches(jsonMime) || mime.equals("*/*"));
    }

    /**
     * Select the Accept header's value from the given accepts array:
     *   if JSON exists in the given array, use it;
     *   otherwise use all of them (joining into a string)
     *
     * @param accepts The accepts array to select from
     * @return The Accept header to use. If the given array is empty,
     *   null will be returned (not to set the Accept header explicitly).
     */
    public String selectHeaderAccept(String[] accepts) {
        if (accepts.length == 0) {
            return null;
        }
        for (String accept : accepts) {
            if (isJsonMime(accept)) {
                return accept;
            }
        }
        return StringUtil.join(accepts, ",");
    }

    /**
     * Select the Content-Type header's value from the given array:
     *   if JSON exists in the given array, use it;
     *   otherwise use the first one of the array.
     *
     * @param contentTypes The Content-Type array to select from
     * @return The Content-Type header to use. If the given array is empty,
     *   returns null. If it matches "any", JSON will be used.
     */
    public String selectHeaderContentType(String[] contentTypes) {
        if (contentTypes.length == 0) {
            return null;
        }

        if (contentTypes[0].equals("*/*")) {
            return "application/json";
        }

        for (String contentType : contentTypes) {
            if (isJsonMime(contentType)) {
                return contentType;
            }
        }

        return contentTypes[0];
    }

    /**
     * Escape the given string to be used as URL query value.
     *
     * @param str String to be escaped
     * @return Escaped string
     */
    public String escapeString(String str) {
        try {
            return URLEncoder.encode(str, "utf8").replaceAll("\\+", "%20");
        } catch (UnsupportedEncodingException e) {
            return str;
        }
    }

    /**
     * Deserialize response body to Java object, according to the return type and
     * the Content-Type response header.
     *
     * @param <T> Type
     * @param response HTTP response
     * @param returnType The type of the Java object
     * @return The deserialized Java object
     * @throws com.cashfree.ApiException If fail to deserialize response body, i.e. cannot read response body
     *   or the Content-Type of the response is not supported.
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(Response response, Type returnType) throws ApiException {
        if (response == null || returnType == null) {
            return null;
        }

        if ("byte[]".equals(returnType.toString())) {
            // Handle binary response (byte array).
            try {
                return (T) response.body().bytes();
            } catch (IOException e) {
                throw new ApiException(e);
            }
        } else if (returnType.equals(File.class)) {
            // Handle file downloading.
            return (T) downloadFileFromResponse(response);
        }

        String respBody;
        try {
            if (response.body() != null)
                respBody = response.body().string();
            else
                respBody = null;
        } catch (IOException e) {
            throw new ApiException(e);
        }

        if (respBody == null || "".equals(respBody)) {
            return null;
        }

        String contentType = response.headers().get("Content-Type");
        if (contentType == null) {
            // ensuring a default content type
            contentType = "application/json";
        }
        if (isJsonMime(contentType)) {
            return JSON.deserialize(respBody, returnType);
        } else if (returnType.equals(String.class)) {
            // Expecting string, return the raw response body.
            return (T) respBody;
        } else {
            throw new ApiException(
                    "Content type \"" + contentType + "\" is not supported for type: " + returnType,
                    response.code(),
                    response.headers().toMultimap(),
                    respBody);
        }
    }

    /**
     * Serialize the given Java object into request body according to the object's
     * class and the request Content-Type.
     *
     * @param obj The Java object
     * @param contentType The request Content-Type
     * @return The serialized request body
     * @throws com.cashfree.ApiException If fail to serialize the given object
     */
    public RequestBody serialize(Object obj, String contentType) throws ApiException {
        if (obj instanceof byte[]) {
            // Binary (byte array) body parameter support.
            return RequestBody.create((byte[]) obj, MediaType.parse(contentType));
        } else if (obj instanceof File) {
            // File body parameter support.
            return RequestBody.create((File) obj, MediaType.parse(contentType));
        } else if ("text/plain".equals(contentType) && obj instanceof String) {
            return RequestBody.create((String) obj, MediaType.parse(contentType));
        } else if (isJsonMime(contentType)) {
            String content;
            if (obj != null) {
                content = JSON.serialize(obj);
            } else {
                content = null;
            }
            return RequestBody.create(content, MediaType.parse(contentType));
        } else if (obj instanceof String) {
            return RequestBody.create((String) obj, MediaType.parse(contentType));
        } else {
            throw new ApiException("Content type \"" + contentType + "\" is not supported");
        }
    }

    /**
     * Download file from the given response.
     *
     * @param response An instance of the Response object
     * @throws com.cashfree.ApiException If fail to read file content from response and write to disk
     * @return Downloaded file
     */
    public File downloadFileFromResponse(Response response) throws ApiException {
        try {
            File file = prepareDownloadFile(response);
            BufferedSink sink = Okio.buffer(Okio.sink(file));
            sink.writeAll(response.body().source());
            sink.close();
            return file;
        } catch (IOException e) {
            throw new ApiException(e);
        }
    }

    /**
     * Prepare file for download
     *
     * @param response An instance of the Response object
     * @return Prepared file for the download
     * @throws java.io.IOException If fail to prepare file for download
     */
    public File prepareDownloadFile(Response response) throws IOException {
        String filename = null;
        String contentDisposition = response.header("Content-Disposition");
        if (contentDisposition != null && !"".equals(contentDisposition)) {
            // Get filename from the Content-Disposition header.
            Pattern pattern = Pattern.compile("filename=['\"]?([^'\"\\s]+)['\"]?");
            Matcher matcher = pattern.matcher(contentDisposition);
            if (matcher.find()) {
                filename = sanitizeFilename(matcher.group(1));
            }
        }

        String prefix = null;
        String suffix = null;
        if (filename == null) {
            prefix = "download-";
            suffix = "";
        } else {
            int pos = filename.lastIndexOf(".");
            if (pos == -1) {
                prefix = filename + "-";
            } else {
                prefix = filename.substring(0, pos) + "-";
                suffix = filename.substring(pos);
            }
            // Files.createTempFile requires the prefix to be at least three characters long
            if (prefix.length() < 3)
                prefix = "download-";
        }

        if (tempFolderPath == null)
            return Files.createTempFile(prefix, suffix).toFile();
        else
            return Files.createTempFile(Paths.get(tempFolderPath), prefix, suffix).toFile();
    }

    /**
     * {@link #execute(Call, Type)}
     *
     * @param <T> Type
     * @param call An instance of the Call object
     * @return ApiResponse&lt;T&gt;
     * @throws com.cashfree.ApiException If fail to execute the call
     */
    public <T> ApiResponse<T> execute(Call call) throws ApiException {
        return execute(call, null);
    }

    /**
     * Execute HTTP call and deserialize the HTTP response body into the given return type.
     *
     * @param returnType The return type used to deserialize HTTP response body
     * @param <T> The return type corresponding to (same with) returnType
     * @param call Call
     * @return ApiResponse object containing response status, headers and
     *   data, which is a Java object deserialized from response body and would be null
     *   when returnType is null.
     * @throws com.cashfree.ApiException If fail to execute the call
     */
    public <T> ApiResponse<T> execute(Call call, Type returnType) throws ApiException {
        try {
            Response response = call.execute();
            T data = handleResponse(response, returnType);
            return new ApiResponse<T>(response.code(), response.headers().toMultimap(), data);
        } catch (IOException e) {
            throw new ApiException(e);
        }
    }

    /**
     * {@link #executeAsync(Call, Type, ApiCallback)}
     *
     * @param <T> Type
     * @param call An instance of the Call object
     * @param callback ApiCallback&lt;T&gt;
     */
    public <T> void executeAsync(Call call, ApiCallback<T> callback) {
        executeAsync(call, null, callback);
    }

    /**
     * Execute HTTP call asynchronously.
     *
     * @param <T> Type
     * @param call The callback to be executed when the API call finishes
     * @param returnType Return type
     * @param callback ApiCallback
     * @see #execute(Call, Type)
     */
    @SuppressWarnings("unchecked")
    public <T> void executeAsync(Call call, final Type returnType, final ApiCallback<T> callback) {
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                callback.onFailure(new ApiException(e), 0, null);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                T result;
                try {
                    result = (T) handleResponse(response, returnType);
                } catch (ApiException e) {
                    callback.onFailure(e, response.code(), response.headers().toMultimap());
                    return;
                } catch (Exception e) {
                    callback.onFailure(new ApiException(e), response.code(), response.headers().toMultimap());
                    return;
                }
                callback.onSuccess(result, response.code(), response.headers().toMultimap());
            }
        });
    }

    /**
     * Handle the given response, return the deserialized object when the response is successful.
     *
     * @param <T> Type
     * @param response Response
     * @param returnType Return type
     * @return Type
     * @throws com.cashfree.ApiException If the response has an unsuccessful status code or
     *                      fail to deserialize the response body
     */
    public <T> T handleResponse(Response response, Type returnType) throws ApiException {
        if (response.isSuccessful()) {
            if (returnType == null || response.code() == 204) {
                // returning null if the returnType is not defined,
                // or the status code is 204 (No Content)
                if (response.body() != null) {
                    try {
                        response.body().close();
                    } catch (Exception e) {
                        throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());
                    }
                }
                return null;
            } else {
                return deserialize(response, returnType);
            }
        } else {
            String respBody = null;
            if (response.body() != null) {
                try {
                    respBody = response.body().string();
                } catch (IOException e) {
                    throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());
                }
            }
            throw new ApiException(response.message(), response.code(), response.headers().toMultimap(), respBody);
        }
    }

    /**
     * Build HTTP call with the given options.
     *
     * @param baseUrl The base URL
     * @param path The sub-path of the HTTP URL
     * @param method The request method, one of "GET", "HEAD", "OPTIONS", "POST", "PUT", "PATCH" and "DELETE"
     * @param queryParams The query parameters
     * @param collectionQueryParams The collection query parameters
     * @param body The request body object
     * @param headerParams The header parameters
     * @param cookieParams The cookie parameters
     * @param formParams The form parameters
     * @param authNames The authentications to apply
     * @param callback Callback for upload/download progress
     * @return The HTTP call
     * @throws com.cashfree.ApiException If fail to serialize the request body object
     */
    public Call buildCall(String baseUrl, String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String[] authNames, ApiCallback callback) throws ApiException {
        Request request = buildRequest(baseUrl, path, method, queryParams, collectionQueryParams, body, headerParams, cookieParams, formParams, authNames, callback);

        return httpClient.newCall(request);
    }

    /**
     * Build an HTTP request with the given options.
     *
     * @param baseUrl The base URL
     * @param path The sub-path of the HTTP URL
     * @param method The request method, one of "GET", "HEAD", "OPTIONS", "POST", "PUT", "PATCH" and "DELETE"
     * @param queryParams The query parameters
     * @param collectionQueryParams The collection query parameters
     * @param body The request body object
     * @param headerParams The header parameters
     * @param cookieParams The cookie parameters
     * @param formParams The form parameters
     * @param authNames The authentications to apply
     * @param callback Callback for upload/download progress
     * @return The HTTP request
     * @throws com.cashfree.ApiException If fail to serialize the request body object
     */
    public Request buildRequest(String baseUrl, String path, String method, List<Pair> queryParams, List<Pair> collectionQueryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String[] authNames, ApiCallback callback) throws ApiException {
        // aggregate queryParams (non-collection) and collectionQueryParams into allQueryParams
        List<Pair> allQueryParams = new ArrayList<Pair>(queryParams);
        allQueryParams.addAll(collectionQueryParams);

        final String url = buildUrl(baseUrl, path, queryParams, collectionQueryParams);

        // prepare HTTP request body
        RequestBody reqBody;
        String contentType = headerParams.get("Content-Type");
        String contentTypePure = contentType;
        if (contentTypePure != null && contentTypePure.contains(";")) {
            contentTypePure = contentType.substring(0, contentType.indexOf(";"));
        }
        if (!HttpMethod.permitsRequestBody(method)) {
            reqBody = null;
        } else if ("application/x-www-form-urlencoded".equals(contentTypePure)) {
            reqBody = buildRequestBodyFormEncoding(formParams);
        } else if ("multipart/form-data".equals(contentTypePure)) {
            reqBody = buildRequestBodyMultipart(formParams);
        } else if (body == null) {
            if ("DELETE".equals(method)) {
                // allow calling DELETE without sending a request body
                reqBody = null;
            } else {
                // use an empty request body (for POST, PUT and PATCH)
                reqBody = RequestBody.create("", contentType == null ? null : MediaType.parse(contentType));
            }
        } else {
            reqBody = serialize(body, contentType);
        }

        // update parameters with authentication settings
        updateParamsForAuth(authNames, allQueryParams, headerParams, cookieParams, requestBodyToString(reqBody), method, URI.create(url));

        final Request.Builder reqBuilder = new Request.Builder().url(url);
        processHeaderParams(headerParams, reqBuilder);
        processCookieParams(cookieParams, reqBuilder);

        // Associate callback with request (if not null) so interceptor can
        // access it when creating ProgressResponseBody
        reqBuilder.tag(callback);

        Request request = null;

        if (callback != null && reqBody != null) {
            ProgressRequestBody progressRequestBody = new ProgressRequestBody(reqBody, callback);
            request = reqBuilder.method(method, progressRequestBody).build();
        } else {
            request = reqBuilder.method(method, reqBody).build();
        }

        return request;
    }

    /**
     * Build full URL by concatenating base path, the given sub path and query parameters.
     *
     * @param baseUrl The base URL
     * @param path The sub path
     * @param queryParams The query parameters
     * @param collectionQueryParams The collection query parameters
     * @return The full URL
     */
    public String buildUrl(String baseUrl, String path, List<Pair> queryParams, List<Pair> collectionQueryParams) {
        final StringBuilder url = new StringBuilder();
        if (baseUrl != null) {
            url.append(baseUrl).append(path);
        } else {
            String baseURL;
            if (serverIndex != null) {
                if (serverIndex < 0 || serverIndex >= servers.size()) {
                    throw new ArrayIndexOutOfBoundsException(String.format(
                    "Invalid index %d when selecting the host settings. Must be less than %d", serverIndex, servers.size()
                    ));
                }
                baseURL = servers.get(serverIndex).URL(serverVariables);
            } else {
                baseURL = basePath;
            }
            url.append(baseURL).append(path);
        }

        if (queryParams != null && !queryParams.isEmpty()) {
            // support (constant) query string in `path`, e.g. "/posts?draft=1"
            String prefix = path.contains("?") ? "&" : "?";
            for (Pair param : queryParams) {
                if (param.getValue() != null) {
                    if (prefix != null) {
                        url.append(prefix);
                        prefix = null;
                    } else {
                        url.append("&");
                    }
                    String value = parameterToString(param.getValue());
                    url.append(escapeString(param.getName())).append("=").append(escapeString(value));
                }
            }
        }

        if (collectionQueryParams != null && !collectionQueryParams.isEmpty()) {
            String prefix = url.toString().contains("?") ? "&" : "?";
            for (Pair param : collectionQueryParams) {
                if (param.getValue() != null) {
                    if (prefix != null) {
                        url.append(prefix);
                        prefix = null;
                    } else {
                        url.append("&");
                    }
                    String value = parameterToString(param.getValue());
                    // collection query parameter value already escaped as part of parameterToPairs
                    url.append(escapeString(param.getName())).append("=").append(value);
                }
            }
        }

        return url.toString();
    }

    /**
     * Set header parameters to the request builder, including default headers.
     *
     * @param headerParams Header parameters in the form of Map
     * @param reqBuilder Request.Builder
     */
    public void processHeaderParams(Map<String, String> headerParams, Request.Builder reqBuilder) {
        for (Entry<String, String> param : headerParams.entrySet()) {
            reqBuilder.header(param.getKey(), parameterToString(param.getValue()));
        }
        for (Entry<String, String> header : defaultHeaderMap.entrySet()) {
            if (!headerParams.containsKey(header.getKey())) {
                reqBuilder.header(header.getKey(), parameterToString(header.getValue()));
            }
        }
    }

    /**
     * Set cookie parameters to the request builder, including default cookies.
     *
     * @param cookieParams Cookie parameters in the form of Map
     * @param reqBuilder Request.Builder
     */
    public void processCookieParams(Map<String, String> cookieParams, Request.Builder reqBuilder) {
        for (Entry<String, String> param : cookieParams.entrySet()) {
            reqBuilder.addHeader("Cookie", String.format("%s=%s", param.getKey(), param.getValue()));
        }
        for (Entry<String, String> param : defaultCookieMap.entrySet()) {
            if (!cookieParams.containsKey(param.getKey())) {
                reqBuilder.addHeader("Cookie", String.format("%s=%s", param.getKey(), param.getValue()));
            }
        }
    }

    /**
     * Update query and header parameters based on authentication settings.
     *
     * @param authNames The authentications to apply
     * @param queryParams List of query parameters
     * @param headerParams Map of header parameters
     * @param cookieParams Map of cookie parameters
     * @param payload HTTP request body
     * @param method HTTP method
     * @param uri URI
     * @throws com.cashfree.ApiException If fails to update the parameters
     */
    public void updateParamsForAuth(String[] authNames, List<Pair> queryParams, Map<String, String> headerParams,
                                    Map<String, String> cookieParams, String payload, String method, URI uri) throws ApiException {
        for (String authName : authNames) {
            Authentication auth = authentications.get(authName);
            if (auth == null) {
                throw new RuntimeException("Authentication undefined: " + authName);
            }
            auth.applyToParams(queryParams, headerParams, cookieParams, payload, method, uri);
        }
    }

    /**
     * Build a form-encoding request body with the given form parameters.
     *
     * @param formParams Form parameters in the form of Map
     * @return RequestBody
     */
    public RequestBody buildRequestBodyFormEncoding(Map<String, Object> formParams) {
        okhttp3.FormBody.Builder formBuilder = new okhttp3.FormBody.Builder();
        for (Entry<String, Object> param : formParams.entrySet()) {
            formBuilder.add(param.getKey(), parameterToString(param.getValue()));
        }
        return formBuilder.build();
    }

    /**
     * Build a multipart (file uploading) request body with the given form parameters,
     * which could contain text fields and file fields.
     *
     * @param formParams Form parameters in the form of Map
     * @return RequestBody
     */
    public RequestBody buildRequestBodyMultipart(Map<String, Object> formParams) {
        MultipartBody.Builder mpBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);
        for (Entry<String, Object> param : formParams.entrySet()) {
            if (param.getValue() instanceof File) {
                File file = (File) param.getValue();
                addPartToMultiPartBuilder(mpBuilder, param.getKey(), file);
            } else if (param.getValue() instanceof List) {
                List list = (List) param.getValue();
                for (Object item: list) {
                    if (item instanceof File) {
                        addPartToMultiPartBuilder(mpBuilder, param.getKey(), (File) item);
                    } else {
                        addPartToMultiPartBuilder(mpBuilder, param.getKey(), param.getValue());
                    }
                }
            } else {
                addPartToMultiPartBuilder(mpBuilder, param.getKey(), param.getValue());
            }
        }
        return mpBuilder.build();
    }

    /**
     * Guess Content-Type header from the given file (defaults to "application/octet-stream").
     *
     * @param file The given file
     * @return The guessed Content-Type
     */
    public String guessContentTypeFromFile(File file) {
        String contentType = URLConnection.guessContentTypeFromName(file.getName());
        if (contentType == null) {
            return "application/octet-stream";
        } else {
            return contentType;
        }
    }

    /**
     * Add a Content-Disposition Header for the given key and file to the MultipartBody Builder.
     *
     * @param mpBuilder MultipartBody.Builder 
     * @param key The key of the Header element
     * @param file The file to add to the Header
     */ 
    private void addPartToMultiPartBuilder(MultipartBody.Builder mpBuilder, String key, File file) {
        Headers partHeaders = Headers.of("Content-Disposition", "form-data; name=\"" + key + "\"; filename=\"" + file.getName() + "\"");
        MediaType mediaType = MediaType.parse(guessContentTypeFromFile(file));
        mpBuilder.addPart(partHeaders, RequestBody.create(file, mediaType));
    }

    /**
     * Add a Content-Disposition Header for the given key and complex object to the MultipartBody Builder.
     *
     * @param mpBuilder MultipartBody.Builder
     * @param key The key of the Header element
     * @param obj The complex object to add to the Header
     */
    private void addPartToMultiPartBuilder(MultipartBody.Builder mpBuilder, String key, Object obj) {
        RequestBody requestBody;
        if (obj instanceof String) {
            requestBody = RequestBody.create((String) obj, MediaType.parse("text/plain"));
        } else {
            String content;
            if (obj != null) {
                content = JSON.serialize(obj);
            } else {
                content = null;
            }
            requestBody = RequestBody.create(content, MediaType.parse("application/json"));
        }

        Headers partHeaders = Headers.of("Content-Disposition", "form-data; name=\"" + key + "\"");
        mpBuilder.addPart(partHeaders, requestBody);
    }

    /**
     * Get network interceptor to add it to the httpClient to track download progress for
     * async requests.
     */
    private Interceptor getProgressInterceptor() {
        return new Interceptor() {
            @Override
            public Response intercept(Interceptor.Chain chain) throws IOException {
                final Request request = chain.request();
                final Response originalResponse = chain.proceed(request);
                if (request.tag() instanceof ApiCallback) {
                    final ApiCallback callback = (ApiCallback) request.tag();
                    return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), callback))
                        .build();
                }
                return originalResponse;
            }
        };
    }

    /**
     * Apply SSL related settings to httpClient according to the current values of
     * verifyingSsl and sslCaCert.
     */
    private void applySslSettings() {
        try {
            TrustManager[] trustManagers;
            HostnameVerifier hostnameVerifier;
            if (!verifyingSsl) {
                trustManagers = new TrustManager[]{
                        new X509TrustManager() {
                            @Override
                            public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                            }

                            @Override
                            public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
                            }

                            @Override
                            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                                return new java.security.cert.X509Certificate[]{};
                            }
                        }
                };
                hostnameVerifier = new HostnameVerifier() {
                    @Override
                    public boolean verify(String hostname, SSLSession session) {
                        return true;
                    }
                };
            } else {
                TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());

                if (sslCaCert == null) {
                    trustManagerFactory.init((KeyStore) null);
                } else {
                    char[] password = null; // Any password will work.
                    CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
                    Collection<? extends Certificate> certificates = certificateFactory.generateCertificates(sslCaCert);
                    if (certificates.isEmpty()) {
                        throw new IllegalArgumentException("expected non-empty set of trusted certificates");
                    }
                    KeyStore caKeyStore = newEmptyKeyStore(password);
                    int index = 0;
                    for (Certificate certificate : certificates) {
                        String certificateAlias = "ca" + (index++);
                        caKeyStore.setCertificateEntry(certificateAlias, certificate);
                    }
                    trustManagerFactory.init(caKeyStore);
                }
                trustManagers = trustManagerFactory.getTrustManagers();
                hostnameVerifier = OkHostnameVerifier.INSTANCE;
            }

            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(keyManagers, trustManagers, new SecureRandom());
            httpClient = httpClient.newBuilder()
                            .sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0])
                            .hostnameVerifier(hostnameVerifier)
                            .build();
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }

    private KeyStore newEmptyKeyStore(char[] password) throws GeneralSecurityException {
        try {
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            keyStore.load(null, password);
            return keyStore;
        } catch (IOException e) {
            throw new AssertionError(e);
        }
    }

    /**
     * Convert the HTTP request body to a string.
     *
     * @param requestBody The HTTP request object
     * @return The string representation of the HTTP request body
     * @throws com.cashfree.ApiException If fail to serialize the request body object into a string
     */
    private String requestBodyToString(RequestBody requestBody) throws ApiException {
        if (requestBody != null) {
            try {
                final Buffer buffer = new Buffer();
                requestBody.writeTo(buffer);
                return buffer.readUtf8();
            } catch (final IOException e) {
                throw new ApiException(e);
            }
        }

        // empty http request body
        return "";
    }
}

    public static class PayoutWebhookEvent {
        String type;
        String rawBody;
        Object object;

        PayoutWebhookEvent(String type, String rawBody, Object object) {
            this.type = type;
            this.rawBody = rawBody;
            this.object = object;
        }
    }
    
}
